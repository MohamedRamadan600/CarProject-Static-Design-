
CarProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000f7e  00001012  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  00800062  00800062  00001014  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002481  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e06  00000000  00000000  00003721  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001673  00000000  00000000  00004527  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00005b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092d  00000000  00000000  00005f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002031  00000000  00000000  000068a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000088da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3a       	cpi	r26, 0xA5	; 165
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 03 	call	0x692	; 0x692 <main>
  8a:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Car_SM_Init>:
	uint8_t Err_Status = ZeroInitial;
	/*Assign No Error for the Err_Status variable*/
	Err_Status = E_OK;
	
	/*Ultrasonic Initialization*/
	Us_Init();
  92:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <Us_Init>
	/*Initialize the module PWM and Motor*/
	Steering_Init();
  96:	0e 94 94 00 	call	0x128	; 0x128 <Steering_Init>
	/*Control the car to move forward with speed 30%*/
	Steering_SteerCar(CAR_FORWARD,InitialSpeed);
  9a:	63 e2       	ldi	r22, 0x23	; 35
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 b7 00 	call	0x16e	; 0x16e <Steering_SteerCar>
	
	return Err_Status;
}
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	08 95       	ret

000000a6 <Car_SM_Update>:
	 uint8_t Err_Status = ZeroInitial;
	 /***Error status is not exist***/
	 Err_Status = E_OK;
	  
	 /***Trigger the Ultrasonic module by dending Trigger signal***/ 
	 Us_Trigger();
  a6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <Us_Trigger>
	 /***getting the distance measured by ultrasonic***/
	 Us_GetDistance(Get_Distance);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 10 03 	call	0x620	; 0x620 <Us_GetDistance>
	
	/***storing get distance value at the car_Distance ***/
	Car_Distance = *Get_Distance;
  b2:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
  b6:	90 91 01 00 	lds	r25, 0x0001	; 0x800001 <__TEXT_REGION_LENGTH__+0x7e0001>
	
	/*** Check boundary cases of car movement and Action used ***/
	if (Car_Distance>=Dangeredge && Car_Distance<=Safeedge)
  ba:	9c 01       	movw	r18, r24
  bc:	24 51       	subi	r18, 0x14	; 20
  be:	31 09       	sbc	r19, r1
  c0:	20 31       	cpi	r18, 0x10	; 16
  c2:	31 05       	cpc	r19, r1
  c4:	d0 f0       	brcs	.+52     	; 0xfa <Car_SM_Update+0x54>
	{
		/***Rotate the car left***/
		Car_state =TakeLeft;
	} 
	/***Distance less than 25 cm***/
	else if(Car_Distance<Dangeredge)
  c6:	44 97       	sbiw	r24, 0x14	; 20
  c8:	18 f5       	brcc	.+70     	; 0x110 <Car_SM_Update+0x6a>
		Steering_SteerCar(CAR_FORWARD,freewayspeed);
		_delay_ms(10);
		break;
	case AvoidAccident:
		/***Move Car to Backward to avoid an accident***/
		Steering_SteerCar(CAR_BACKWARD,VoidAccidentspeed);
  ca:	68 e2       	ldi	r22, 0x28	; 40
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	0e 94 b7 00 	call	0x16e	; 0x16e <Steering_SteerCar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f e7       	ldi	r18, 0x7F	; 127
  d4:	85 eb       	ldi	r24, 0xB5	; 181
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <Car_SM_Update+0x32>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <Car_SM_Update+0x3c>
  e2:	00 00       	nop
		_delay_ms(35);
		/***Move Car to forward again and detect again the distance***/
		Steering_SteerCar(CAR_FORWARD,VoidAccidentspeed);
  e4:	68 e2       	ldi	r22, 0x28	; 40
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 b7 00 	call	0x16e	; 0x16e <Steering_SteerCar>
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9c e9       	ldi	r25, 0x9C	; 156
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <Car_SM_Update+0x4a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <Car_SM_Update+0x50>
  f6:	00 00       	nop
  f8:	15 c0       	rjmp	.+42     	; 0x124 <Car_SM_Update+0x7e>
		_delay_ms(10);
		break;
	case TakeLeft:
		/***Rotate the car to the left Direction***/
		Steering_SteerCar(CAR_LEFT,TakeLeftspeed);
  fa:	68 e2       	ldi	r22, 0x28	; 40
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	0e 94 b7 00 	call	0x16e	; 0x16e <Steering_SteerCar>
 102:	8f e1       	ldi	r24, 0x1F	; 31
 104:	9e e4       	ldi	r25, 0x4E	; 78
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <Car_SM_Update+0x60>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <Car_SM_Update+0x66>
 10c:	00 00       	nop
 10e:	0a c0       	rjmp	.+20     	; 0x124 <Car_SM_Update+0x7e>
	
	switch (Car_state)
	{
	case FreeWay:
		/***Move Car to forward the way is safe***/
		Steering_SteerCar(CAR_FORWARD,freewayspeed);
 110:	68 e2       	ldi	r22, 0x28	; 40
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 b7 00 	call	0x16e	; 0x16e <Steering_SteerCar>
 118:	8f e3       	ldi	r24, 0x3F	; 63
 11a:	9c e9       	ldi	r25, 0x9C	; 156
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <Car_SM_Update+0x76>
 120:	00 c0       	rjmp	.+0      	; 0x122 <Car_SM_Update+0x7c>
 122:	00 00       	nop
		_delay_ms(5);
		break;
	}

	return Err_Status;
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret

00000128 <Steering_Init>:
uint8_t Steering_Init(void){
	uint8_t Err_Status = 0;
	Err_Status =E_OK;
	
	//initialize PWM structure
	Pwm_Cfg_PWM_1A.Channel   = PWM_CH1A;
 128:	ef e6       	ldi	r30, 0x6F	; 111
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24
	Pwm_Cfg_PWM_1A.Prescaler = T1_PRESCALER_1024;
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	81 83       	std	Z+1, r24	; 0x01

	Pwm_Cfg_PWM_1B.Channel   = PWM_CH1B;
 134:	e9 e6       	ldi	r30, 0x69	; 105
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	90 83       	st	Z, r25
	Pwm_Cfg_PWM_1B.Prescaler = T1_PRESCALER_1024;
 13c:	81 83       	std	Z+1, r24	; 0x01
	
	//Initialize PWM
	Pwm_Init(&Pwm_Cfg_PWM_1A);
 13e:	8f e6       	ldi	r24, 0x6F	; 111
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 fe 03 	call	0x7fc	; 0x7fc <Pwm_Init>
	Pwm_Init(&Pwm_Cfg_PWM_1B);
 146:	89 e6       	ldi	r24, 0x69	; 105
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <Pwm_Init>
	
	//Initialize Motor
	Motor_Init(MOTOR_1);
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 c3 01 	call	0x386	; 0x386 <Motor_Init>
	Motor_Init(MOTOR_2);
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	0e 94 c3 01 	call	0x386	; 0x386 <Motor_Init>
	
	Motor_Start(MOTOR_1,0);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Motor_Start>
	Motor_Start(MOTOR_2,0);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Motor_Start>
	return Err_Status;
}
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 95       	ret

0000016e <Steering_SteerCar>:
 * In/Out:			
 * Return: The error status of the function.			
 * Description: This function controls the command and the speed of the car.
 * 							
 */
uint8_t Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
 16e:	cf 93       	push	r28
 170:	c6 2f       	mov	r28, r22
	uint8_t Err_Status = 0;
	Err_Status = E_OK;
	
	switch (Steering_CarCmd)
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	09 f1       	breq	.+66     	; 0x1b8 <Steering_SteerCar+0x4a>
 176:	28 f4       	brcc	.+10     	; 0x182 <Steering_SteerCar+0x14>
 178:	88 23       	and	r24, r24
 17a:	41 f0       	breq	.+16     	; 0x18c <Steering_SteerCar+0x1e>
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	71 f0       	breq	.+28     	; 0x19c <Steering_SteerCar+0x2e>
 180:	45 c0       	rjmp	.+138    	; 0x20c <Steering_SteerCar+0x9e>
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	39 f1       	breq	.+78     	; 0x1d4 <Steering_SteerCar+0x66>
 186:	84 30       	cpi	r24, 0x04	; 4
 188:	99 f1       	breq	.+102    	; 0x1f0 <Steering_SteerCar+0x82>
 18a:	40 c0       	rjmp	.+128    	; 0x20c <Steering_SteerCar+0x9e>
	{
	case CAR_STOP:
		Motor_Stop(MOTOR_1);
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 af 02 	call	0x55e	; 0x55e <Motor_Stop>
		Motor_Stop(MOTOR_2);
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 af 02 	call	0x55e	; 0x55e <Motor_Stop>
 * Description: This function controls the command and the speed of the car.
 * 							
 */
uint8_t Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
	uint8_t Err_Status = 0;
	Err_Status = E_OK;
 198:	80 e0       	ldi	r24, 0x00	; 0
	switch (Steering_CarCmd)
	{
	case CAR_STOP:
		Motor_Stop(MOTOR_1);
		Motor_Stop(MOTOR_2);
		break;
 19a:	39 c0       	rjmp	.+114    	; 0x20e <Steering_SteerCar+0xa0>
	case CAR_FORWARD:
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 0b 02 	call	0x416	; 0x416 <Motor_Direction>
		Motor_Direction(MOTOR_2,MOTOR_FORWARD);
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 0b 02 	call	0x416	; 0x416 <Motor_Direction>
		Motor_SpeedUpdate(MOTOR_1_2,speed);
 1ac:	6c 2f       	mov	r22, r28
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	0e 94 8d 02 	call	0x51a	; 0x51a <Motor_SpeedUpdate>
 * Description: This function controls the command and the speed of the car.
 * 							
 */
uint8_t Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
	uint8_t Err_Status = 0;
	Err_Status = E_OK;
 1b4:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case CAR_FORWARD:
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
		Motor_Direction(MOTOR_2,MOTOR_FORWARD);
		Motor_SpeedUpdate(MOTOR_1_2,speed);
		break;
 1b6:	2b c0       	rjmp	.+86     	; 0x20e <Steering_SteerCar+0xa0>
	case CAR_BACKWARD:
		Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 0b 02 	call	0x416	; 0x416 <Motor_Direction>
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 0b 02 	call	0x416	; 0x416 <Motor_Direction>
	    Motor_SpeedUpdate(MOTOR_1_2,speed);
 1c8:	6c 2f       	mov	r22, r28
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	0e 94 8d 02 	call	0x51a	; 0x51a <Motor_SpeedUpdate>
 * Description: This function controls the command and the speed of the car.
 * 							
 */
uint8_t Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
	uint8_t Err_Status = 0;
	Err_Status = E_OK;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case CAR_BACKWARD:
		Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
	    Motor_SpeedUpdate(MOTOR_1_2,speed);
		break;
 1d2:	1d c0       	rjmp	.+58     	; 0x20e <Steering_SteerCar+0xa0>
		
	case CAR_RIGHT:
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 0b 02 	call	0x416	; 0x416 <Motor_Direction>
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
 1dc:	62 e0       	ldi	r22, 0x02	; 2
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	0e 94 0b 02 	call	0x416	; 0x416 <Motor_Direction>
		Motor_SpeedUpdate(MOTOR_2,speed);
 1e4:	6c 2f       	mov	r22, r28
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	0e 94 8d 02 	call	0x51a	; 0x51a <Motor_SpeedUpdate>
 * Description: This function controls the command and the speed of the car.
 * 							
 */
uint8_t Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
	uint8_t Err_Status = 0;
	Err_Status = E_OK;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
		
	case CAR_RIGHT:
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
		Motor_SpeedUpdate(MOTOR_2,speed);
		break;
 1ee:	0f c0       	rjmp	.+30     	; 0x20e <Steering_SteerCar+0xa0>
	case CAR_LEFT:
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 0b 02 	call	0x416	; 0x416 <Motor_Direction>
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
 1f8:	62 e0       	ldi	r22, 0x02	; 2
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	0e 94 0b 02 	call	0x416	; 0x416 <Motor_Direction>
		Motor_SpeedUpdate(MOTOR_2,speed);
 200:	6c 2f       	mov	r22, r28
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	0e 94 8d 02 	call	0x51a	; 0x51a <Motor_SpeedUpdate>
 * Description: This function controls the command and the speed of the car.
 * 							
 */
uint8_t Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
	uint8_t Err_Status = 0;
	Err_Status = E_OK;
 208:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case CAR_LEFT:
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
		Motor_SpeedUpdate(MOTOR_2,speed);
		break;
 20a:	01 c0       	rjmp	.+2      	; 0x20e <Steering_SteerCar+0xa0>
	default:
		Err_Status = E_NOK;			
 20c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	
	return Err_Status;
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <Icu_Init>:
 * 				  - E_OK  : initialized successfully					  *
 *				  - E_NOK : not initialized successfully				  *
 * Description  : Initializes the ICU by initializing the timer			  *
 * 				  and enabling the global interrupt						  *
 **************************************************************************/
uint8_t Icu_Init(Icu_cfg_s * Icu_Cfg){
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	00 d0       	rcall	.+0      	; 0x21c <Icu_Init+0xa>
 21c:	00 d0       	rcall	.+0      	; 0x21e <Icu_Init+0xc>
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
	Timer_Cfg_S Timer_Cfg;
	
	uint8_t	Er_Status = 0;
	uint8_t ICU_Ch_Number  = Icu_Cfg->ICU_Ch_No;
	uint8_t ICU_Ch_TimerNo = Icu_Cfg->ICU_Ch_Timer;
 222:	fc 01       	movw	r30, r24
 224:	01 81       	ldd	r16, Z+1	; 0x01
	switch (ICU_Ch_Number)
 226:	80 81       	ld	r24, Z
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	61 f0       	breq	.+24     	; 0x244 <Icu_Init+0x32>
 22c:	18 f0       	brcs	.+6      	; 0x234 <Icu_Init+0x22>
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	89 f0       	breq	.+34     	; 0x254 <Icu_Init+0x42>
 232:	17 c0       	rjmp	.+46     	; 0x262 <Icu_Init+0x50>
	{
		case ICU_CH0:
			GICR|=(1<<6);			//enable interrupt 0
 234:	8b b7       	in	r24, 0x3b	; 59
 236:	80 64       	ori	r24, 0x40	; 64
 238:	8b bf       	out	0x3b, r24	; 59
			SREG|=(1<<7);			//enable Global Interrupt
 23a:	8f b7       	in	r24, 0x3f	; 63
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	8f bf       	out	0x3f, r24	; 63
			Er_Status =E_OK;	
 240:	10 e0       	ldi	r17, 0x00	; 0
			break;
 242:	10 c0       	rjmp	.+32     	; 0x264 <Icu_Init+0x52>
		case ICU_CH1:
			GICR|=(1<<7);			//enable interrupt 0
 244:	8b b7       	in	r24, 0x3b	; 59
 246:	80 68       	ori	r24, 0x80	; 128
 248:	8b bf       	out	0x3b, r24	; 59
			SREG|=(1<<7);			//enable Global Interrupt
 24a:	8f b7       	in	r24, 0x3f	; 63
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	8f bf       	out	0x3f, r24	; 63
			Er_Status =E_OK;
 250:	10 e0       	ldi	r17, 0x00	; 0
			break;
 252:	08 c0       	rjmp	.+16     	; 0x264 <Icu_Init+0x52>
		case ICU_CH2:
			EINT2_Enable();
 254:	0e 94 ee 03 	call	0x7dc	; 0x7dc <EINT2_Enable>
			SREG|=(1<<7);
 258:	8f b7       	in	r24, 0x3f	; 63
 25a:	80 68       	ori	r24, 0x80	; 128
 25c:	8f bf       	out	0x3f, r24	; 63
			Er_Status =E_OK;
 25e:	10 e0       	ldi	r17, 0x00	; 0
			break;
 260:	01 c0       	rjmp	.+2      	; 0x264 <Icu_Init+0x52>
		default:
			Er_Status =E_NOK;
 262:	11 e0       	ldi	r17, 0x01	; 1
	}
	Timer_Cfg.Timer_CH_NO = ICU_Ch_TimerNo;
 264:	09 83       	std	Y+1, r16	; 0x01
	Timer_Cfg.Timer_Mode  = 0;
 266:	1a 82       	std	Y+2, r1	; 0x02
	Timer_Cfg.Timer_Polling_Or_Interrupt = 0;
 268:	1b 82       	std	Y+3, r1	; 0x03
	Timer_Cfg.Timer_Prescaler = T2_PRESCALER_1024;
 26a:	87 e0       	ldi	r24, 0x07	; 7
 26c:	8c 83       	std	Y+4, r24	; 0x04
	Timer_Init(&Timer_Cfg);
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	0e 94 55 05 	call	0xaaa	; 0xaaa <Timer_Init>
	return Er_Status;
}
 276:	81 2f       	mov	r24, r17
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <Icu_ReadTime>:
 * 				  which is one of the following values:					   *
 * 				  - E_OK : successful									   *
 *				  - E_NOK : not successful								   *
 * Description	: calculates the time between 2 edges				       *
 ***************************************************************************/
uint8_t Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time){
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ea 01       	movw	r28, r20
	
	uint8_t	Er_Status = 0;
	Edge_Status_Control = Icu_EdgeToEdge;
 290:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <Edge_Status_Control>
	Er_Status = E_OK;
	
	switch (Icu_Channel)
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	79 f0       	breq	.+30     	; 0x2b6 <Icu_ReadTime+0x2c>
 298:	18 f0       	brcs	.+6      	; 0x2a0 <Icu_ReadTime+0x16>
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	b9 f0       	breq	.+46     	; 0x2cc <Icu_ReadTime+0x42>
 29e:	48 c0       	rjmp	.+144    	; 0x330 <Icu_ReadTime+0xa6>
	{
	case ICU_TIMER_CH0:
			switch (Icu_EdgeToEdge)
 2a0:	66 23       	and	r22, r22
 2a2:	19 f0       	breq	.+6      	; 0x2aa <Icu_ReadTime+0x20>
 2a4:	61 30       	cpi	r22, 0x01	; 1
 2a6:	21 f0       	breq	.+8      	; 0x2b0 <Icu_ReadTime+0x26>
 2a8:	43 c0       	rjmp	.+134    	; 0x330 <Icu_ReadTime+0xa6>
			{
			case ICU_RISE_TO_FALL:
				/*clear the ICS2 pin in MCUCSR for falling edge*/
				EINT2_Falling_Edge();
 2aa:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <EINT2_Falling_Edge>
				break;
 2ae:	40 c0       	rjmp	.+128    	; 0x330 <Icu_ReadTime+0xa6>
			case ICU_FALE_TO_RISE:
				/*set the ICS2 pin in MCUCSR for rising edge*/
				EINT2_R_s_Edge();
 2b0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <EINT2_R_s_Edge>
				break;
 2b4:	3d c0       	rjmp	.+122    	; 0x330 <Icu_ReadTime+0xa6>
			}
		break;
	case ICU_TIMER_CH1:
		switch (Icu_EdgeToEdge)
 2b6:	66 23       	and	r22, r22
 2b8:	19 f0       	breq	.+6      	; 0x2c0 <Icu_ReadTime+0x36>
 2ba:	61 30       	cpi	r22, 0x01	; 1
 2bc:	21 f0       	breq	.+8      	; 0x2c6 <Icu_ReadTime+0x3c>
 2be:	38 c0       	rjmp	.+112    	; 0x330 <Icu_ReadTime+0xa6>
		{
			case ICU_RISE_TO_FALL:
				/*clear the ICS2 pin in MCUCSR for falling edge*/
				EINT2_Falling_Edge();
 2c0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <EINT2_Falling_Edge>
				break;
 2c4:	35 c0       	rjmp	.+106    	; 0x330 <Icu_ReadTime+0xa6>
			case ICU_FALE_TO_RISE:
				/*set the ICS2 pin in MCUCSR for rising edge*/
				EINT2_R_s_Edge();
 2c6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <EINT2_R_s_Edge>
				break;
 2ca:	32 c0       	rjmp	.+100    	; 0x330 <Icu_ReadTime+0xa6>
		}
		break;
	case ICU_TIMER_CH2:
		switch (Icu_EdgeToEdge)
 2cc:	61 11       	cpse	r22, r1
 2ce:	30 c0       	rjmp	.+96     	; 0x330 <Icu_ReadTime+0xa6>
		{
			case ICU_RISE_TO_FALL:
				if(ICU_Edge_Status==wait_Rising){
 2d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <ICU_Edge_Status>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	21 f4       	brne	.+8      	; 0x2e0 <Icu_ReadTime+0x56>
					/*set the ICS2 pin in MCUCSR for rising edge*/
					EINT2_R_s_Edge();
 2d8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <EINT2_R_s_Edge>
					//enable interrupt
					EINT2_Enable();
 2dc:	0e 94 ee 03 	call	0x7dc	; 0x7dc <EINT2_Enable>
						
					}
					while(ICU_Edge_Status!=Rising){}
 2e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <ICU_Edge_Status>
 2e4:	81 11       	cpse	r24, r1
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <Icu_ReadTime+0x56>
					//ICU_Edge_Flag = Rising_Edge;
					//start timer2 counting and p rescaling
					Timer_Start(ICU_TIMER_CH2,0);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	0e 94 97 05 	call	0xb2e	; 0xb2e <Timer_Start>
					//Disable External Interrupt as per data sheet
					EINT2_Disable();
 2f2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <EINT2_Disable>
					//writing falling edge on external interrupt
					EINT2_Falling_Edge();
 2f6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <EINT2_Falling_Edge>
					//Enable External Interrupt
					EINT2_Enable();
 2fa:	0e 94 ee 03 	call	0x7dc	; 0x7dc <EINT2_Enable>
					ICU_Edge_Status = wait_Falling;
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <ICU_Edge_Status>
						
					while (ICU_Edge_Status!= Falling){}
 304:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <ICU_Edge_Status>
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	e1 f7       	brne	.-8      	; 0x304 <Icu_ReadTime+0x7a>
					
					//read the counter value in SwICU_Read function
					Timer_GetValue(ICU_TIMER_CH2,&value);
 30c:	62 e6       	ldi	r22, 0x62	; 98
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	0e 94 ee 05 	call	0xbdc	; 0xbdc <Timer_GetValue>
					//stop timer2
					Timer_Stop(ICU_TIMER_CH2);
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Timer_Stop>
					//Disable External Interrupt as per data sheet
					EINT2_Disable();
 31c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <EINT2_Disable>
					//set external interrupt to rising edge
					EINT2_R_s_Edge();
 320:	0e 94 f6 03 	call	0x7ec	; 0x7ec <EINT2_R_s_Edge>
					//Enable External Interrupt
					EINT2_Enable();
 324:	0e 94 ee 03 	call	0x7dc	; 0x7dc <EINT2_Enable>
					//reinitialize the counter 2
					TCNT2 = 0;
 328:	14 bc       	out	0x24, r1	; 36
					ICU_Edge_Status = wait_Rising;
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <ICU_Edge_Status>
		}
		
		break;	
	}
	//store the value counted by the timer from rising to falling
	*Icu_Time = value;
 330:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 334:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 338:	a0 e0       	ldi	r26, 0x00	; 0
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	88 83       	st	Y, r24
 33e:	99 83       	std	Y+1, r25	; 0x01
 340:	aa 83       	std	Y+2, r26	; 0x02
 342:	bb 83       	std	Y+3, r27	; 0x03
	return Er_Status;
}
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <__vector_3>:

ISR(INT2_vect){
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	8f 93       	push	r24
	GIFR |=(1<<5);
 358:	8a b7       	in	r24, 0x3a	; 58
 35a:	80 62       	ori	r24, 0x20	; 32
 35c:	8a bf       	out	0x3a, r24	; 58
	/*check if the trigger is rising edge*/
	if (ICU_Edge_Status == wait_Rising )
 35e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <ICU_Edge_Status>
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	19 f4       	brne	.+6      	; 0x36c <__vector_3+0x20>
	{
		ICU_Edge_Status = Rising;
 366:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <ICU_Edge_Status>
 36a:	07 c0       	rjmp	.+14     	; 0x37a <__vector_3+0x2e>
		
	}
	/*check if the trigger is falling edge*/
	else if (ICU_Edge_Status == wait_Falling)
 36c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <ICU_Edge_Status>
 370:	83 30       	cpi	r24, 0x03	; 3
 372:	19 f4       	brne	.+6      	; 0x37a <__vector_3+0x2e>
	{
		ICU_Edge_Status = Falling;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <ICU_Edge_Status>
		
	}
 37a:	8f 91       	pop	r24
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <Motor_Init>:
 * Description	: Initialize (Enable, IN1, IN2) pins as digital outputs.
 */
 uint8_t Motor_Init(uint8_t Motor_Number){
	 uint8_t Err_Status = 0;
	 
	 DIO_Cfg_M1.GPIO=MOTOR_EN_1_GPIO;
 386:	e2 e8       	ldi	r30, 0x82	; 130
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	93 e0       	ldi	r25, 0x03	; 3
 38c:	90 83       	st	Z, r25
	 DIO_Cfg_M1.dir =OUTPUT;
 38e:	2f ef       	ldi	r18, 0xFF	; 255
 390:	22 83       	std	Z+2, r18	; 0x02
	 DIO_Cfg_M1.pins = MOTOR_EN_1_BIT;
 392:	30 e1       	ldi	r19, 0x10	; 16
 394:	31 83       	std	Z+1, r19	; 0x01
	 
	 DIO_Cfg_M2.GPIO=MOTOR_EN_2_GPIO;
 396:	e9 e7       	ldi	r30, 0x79	; 121
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	90 83       	st	Z, r25
	 DIO_Cfg_M2.dir =OUTPUT;
 39c:	22 83       	std	Z+2, r18	; 0x02
	 DIO_Cfg_M2.pins = MOTOR_EN_2_BIT;
 39e:	30 e2       	ldi	r19, 0x20	; 32
 3a0:	31 83       	std	Z+1, r19	; 0x01
	 
	 DIO_Cfg_M1A.GPIO=MOTOR_OUT_1A_GPIO;
 3a2:	e8 e8       	ldi	r30, 0x88	; 136
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	90 83       	st	Z, r25
	 DIO_Cfg_M1A.dir =OUTPUT;
 3a8:	22 83       	std	Z+2, r18	; 0x02
	 DIO_Cfg_M1A.pins = MOTOR_OUT_1A_BIT;
 3aa:	34 e0       	ldi	r19, 0x04	; 4
 3ac:	31 83       	std	Z+1, r19	; 0x01
	 
	 DIO_Cfg_M1B.GPIO=MOTOR_OUT_1B_GPIO;
 3ae:	ef e7       	ldi	r30, 0x7F	; 127
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	90 83       	st	Z, r25
	 DIO_Cfg_M1A.dir =OUTPUT;
	 DIO_Cfg_M1B.pins = MOTOR_OUT_1B_BIT;
 3b4:	38 e0       	ldi	r19, 0x08	; 8
 3b6:	31 83       	std	Z+1, r19	; 0x01
	 
	 DIO_Cfg_M2A.GPIO=MOTOR_OUT_2A_GPIO;
 3b8:	ec e7       	ldi	r30, 0x7C	; 124
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	90 83       	st	Z, r25
	 DIO_Cfg_M2A.dir =OUTPUT;
 3be:	22 83       	std	Z+2, r18	; 0x02
	 DIO_Cfg_M2A.pins = MOTOR_OUT_2A_BIT;
 3c0:	30 e4       	ldi	r19, 0x40	; 64
 3c2:	31 83       	std	Z+1, r19	; 0x01
	 
	 DIO_Cfg_M2B.GPIO=MOTOR_OUT_2B_GPIO;
 3c4:	e5 e8       	ldi	r30, 0x85	; 133
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	90 83       	st	Z, r25
	 DIO_Cfg_M2B.dir =OUTPUT;
 3ca:	22 83       	std	Z+2, r18	; 0x02
	 DIO_Cfg_M2B.pins = MOTOR_OUT_2B_BIT;
 3cc:	90 e8       	ldi	r25, 0x80	; 128
 3ce:	91 83       	std	Z+1, r25	; 0x01
	 
	 switch (Motor_Number)
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	19 f0       	breq	.+6      	; 0x3da <Motor_Init+0x54>
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	79 f0       	breq	.+30     	; 0x3f6 <Motor_Init+0x70>
 3d8:	1c c0       	rjmp	.+56     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	 {
	 case MOTOR_1:
		DIO_init(&DIO_Cfg_M1);
 3da:	82 e8       	ldi	r24, 0x82	; 130
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 4e 03 	call	0x69c	; 0x69c <DIO_init>
		DIO_init(&DIO_Cfg_M1A);
 3e2:	88 e8       	ldi	r24, 0x88	; 136
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 4e 03 	call	0x69c	; 0x69c <DIO_init>
		DIO_init(&DIO_Cfg_M1B);
 3ea:	8f e7       	ldi	r24, 0x7F	; 127
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 4e 03 	call	0x69c	; 0x69c <DIO_init>
 * In out		: none
 * Return		: ERROR_STATUS
 * Description	: Initialize (Enable, IN1, IN2) pins as digital outputs.
 */
 uint8_t Motor_Init(uint8_t Motor_Number){
	 uint8_t Err_Status = 0;
 3f2:	80 e0       	ldi	r24, 0x00	; 0
	 {
	 case MOTOR_1:
		DIO_init(&DIO_Cfg_M1);
		DIO_init(&DIO_Cfg_M1A);
		DIO_init(&DIO_Cfg_M1B);
	 	break;
 3f4:	08 95       	ret
	 case MOTOR_2:
		 DIO_init(&DIO_Cfg_M2);
 3f6:	89 e7       	ldi	r24, 0x79	; 121
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 4e 03 	call	0x69c	; 0x69c <DIO_init>
		 DIO_init(&DIO_Cfg_M2A);
 3fe:	8c e7       	ldi	r24, 0x7C	; 124
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 4e 03 	call	0x69c	; 0x69c <DIO_init>
		 DIO_init(&DIO_Cfg_M2B);
 406:	85 e8       	ldi	r24, 0x85	; 133
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 4e 03 	call	0x69c	; 0x69c <DIO_init>
 * In out		: none
 * Return		: ERROR_STATUS
 * Description	: Initialize (Enable, IN1, IN2) pins as digital outputs.
 */
 uint8_t Motor_Init(uint8_t Motor_Number){
	 uint8_t Err_Status = 0;
 40e:	80 e0       	ldi	r24, 0x00	; 0
	 	break;
	 case MOTOR_2:
		 DIO_init(&DIO_Cfg_M2);
		 DIO_init(&DIO_Cfg_M2A);
		 DIO_init(&DIO_Cfg_M2B);
		 break;	 
 410:	08 95       	ret
	 default:
		 Err_Status = E_NOK;	 
 412:	81 e0       	ldi	r24, 0x01	; 1
	 }
	 
	return  Err_Status;
 }
 414:	08 95       	ret

00000416 <Motor_Direction>:
 * Description: Controls the motor direction from getting the motor number and the direction.
*/
uint8_t Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction){
		 uint8_t Err_Status = 0;
		 
	switch (Motor_Number)
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	19 f0       	breq	.+6      	; 0x420 <Motor_Direction+0xa>
 41a:	82 30       	cpi	r24, 0x02	; 2
 41c:	81 f1       	breq	.+96     	; 0x47e <Motor_Direction+0x68>
 41e:	5e c0       	rjmp	.+188    	; 0x4dc <Motor_Direction+0xc6>
	{
		case MOTOR_1:
			switch (Motor_Direction)
 420:	61 30       	cpi	r22, 0x01	; 1
 422:	a9 f0       	breq	.+42     	; 0x44e <Motor_Direction+0x38>
 424:	18 f0       	brcs	.+6      	; 0x42c <Motor_Direction+0x16>
 426:	62 30       	cpi	r22, 0x02	; 2
 428:	f1 f0       	breq	.+60     	; 0x466 <Motor_Direction+0x50>
 42a:	5a c0       	rjmp	.+180    	; 0x4e0 <Motor_Direction+0xca>
			{
			case MOTOR_STOP:
				DIO_Write(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, LOW);
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	60 e1       	ldi	r22, 0x10	; 16
 430:	83 e0       	ldi	r24, 0x03	; 3
 432:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
				DIO_Write(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	64 e0       	ldi	r22, 0x04	; 4
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
				DIO_Write(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	68 e0       	ldi	r22, 0x08	; 8
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Controls the motor direction from getting the motor number and the direction.
*/
uint8_t Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction){
		 uint8_t Err_Status = 0;
 44a:	80 e0       	ldi	r24, 0x00	; 0
			{
			case MOTOR_STOP:
				DIO_Write(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, LOW);
				DIO_Write(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
				DIO_Write(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
				break;
 44c:	08 95       	ret
			case MOTOR_FORWARD:
				DIO_Write(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, HIGH);
 44e:	4f ef       	ldi	r20, 0xFF	; 255
 450:	64 e0       	ldi	r22, 0x04	; 4
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
				DIO_Write(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
 458:	40 e0       	ldi	r20, 0x00	; 0
 45a:	68 e0       	ldi	r22, 0x08	; 8
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Controls the motor direction from getting the motor number and the direction.
*/
uint8_t Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction){
		 uint8_t Err_Status = 0;
 462:	80 e0       	ldi	r24, 0x00	; 0
				DIO_Write(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
				break;
			case MOTOR_FORWARD:
				DIO_Write(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, HIGH);
				DIO_Write(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
				break;
 464:	08 95       	ret
			case MOTOR_BACKWARD:
				DIO_Write(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	64 e0       	ldi	r22, 0x04	; 4
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
				DIO_Write(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, HIGH);
 470:	4f ef       	ldi	r20, 0xFF	; 255
 472:	68 e0       	ldi	r22, 0x08	; 8
 474:	83 e0       	ldi	r24, 0x03	; 3
 476:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Controls the motor direction from getting the motor number and the direction.
*/
uint8_t Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction){
		 uint8_t Err_Status = 0;
 47a:	80 e0       	ldi	r24, 0x00	; 0
				DIO_Write(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
				break;
			case MOTOR_BACKWARD:
				DIO_Write(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
				DIO_Write(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, HIGH);
				break;		
 47c:	08 95       	ret
			}
			break;
		case MOTOR_2:
			switch (Motor_Direction)
 47e:	61 30       	cpi	r22, 0x01	; 1
 480:	a9 f0       	breq	.+42     	; 0x4ac <Motor_Direction+0x96>
 482:	18 f0       	brcs	.+6      	; 0x48a <Motor_Direction+0x74>
 484:	62 30       	cpi	r22, 0x02	; 2
 486:	f1 f0       	breq	.+60     	; 0x4c4 <Motor_Direction+0xae>
 488:	2d c0       	rjmp	.+90     	; 0x4e4 <Motor_Direction+0xce>
			{
				case MOTOR_STOP:
				DIO_Write(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, LOW);
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	60 e2       	ldi	r22, 0x20	; 32
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
				DIO_Write(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	60 e4       	ldi	r22, 0x40	; 64
 498:	83 e0       	ldi	r24, 0x03	; 3
 49a:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
				DIO_Write(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	60 e8       	ldi	r22, 0x80	; 128
 4a2:	83 e0       	ldi	r24, 0x03	; 3
 4a4:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Controls the motor direction from getting the motor number and the direction.
*/
uint8_t Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction){
		 uint8_t Err_Status = 0;
 4a8:	80 e0       	ldi	r24, 0x00	; 0
			{
				case MOTOR_STOP:
				DIO_Write(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, LOW);
				DIO_Write(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
				DIO_Write(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
				break;
 4aa:	08 95       	ret
				case MOTOR_FORWARD:
				DIO_Write(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, HIGH);
 4ac:	4f ef       	ldi	r20, 0xFF	; 255
 4ae:	60 e4       	ldi	r22, 0x40	; 64
 4b0:	83 e0       	ldi	r24, 0x03	; 3
 4b2:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
				DIO_Write(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
 4b6:	40 e0       	ldi	r20, 0x00	; 0
 4b8:	60 e8       	ldi	r22, 0x80	; 128
 4ba:	83 e0       	ldi	r24, 0x03	; 3
 4bc:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Controls the motor direction from getting the motor number and the direction.
*/
uint8_t Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction){
		 uint8_t Err_Status = 0;
 4c0:	80 e0       	ldi	r24, 0x00	; 0
				DIO_Write(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
				break;
				case MOTOR_FORWARD:
				DIO_Write(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, HIGH);
				DIO_Write(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
				break;
 4c2:	08 95       	ret
				case MOTOR_BACKWARD:
				DIO_Write(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	60 e4       	ldi	r22, 0x40	; 64
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
				DIO_Write(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, HIGH);
 4ce:	4f ef       	ldi	r20, 0xFF	; 255
 4d0:	60 e8       	ldi	r22, 0x80	; 128
 4d2:	83 e0       	ldi	r24, 0x03	; 3
 4d4:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Controls the motor direction from getting the motor number and the direction.
*/
uint8_t Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction){
		 uint8_t Err_Status = 0;
 4d8:	80 e0       	ldi	r24, 0x00	; 0
				DIO_Write(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
				break;
				case MOTOR_BACKWARD:
				DIO_Write(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
				DIO_Write(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, HIGH);
				break;
 4da:	08 95       	ret
			}
			break;
		default:
			Err_Status = E_NOK;
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	08 95       	ret
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Controls the motor direction from getting the motor number and the direction.
*/
uint8_t Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction){
		 uint8_t Err_Status = 0;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	08 95       	ret
 4e4:	80 e0       	ldi	r24, 0x00	; 0
		default:
			Err_Status = E_NOK;
	}
	
	return  Err_Status;
}
 4e6:	08 95       	ret

000004e8 <Motor_Start>:
 * return 	 : ERROR_STATUS
 * Description: Start the motor.
*/
uint8_t Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed){
		uint8_t Err_Status = 0;
		switch (Motor_Number)
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	19 f0       	breq	.+6      	; 0x4f2 <Motor_Start+0xa>
 4ec:	82 30       	cpi	r24, 0x02	; 2
 4ee:	51 f0       	breq	.+20     	; 0x504 <Motor_Start+0x1c>
 4f0:	12 c0       	rjmp	.+36     	; 0x516 <Motor_Start+0x2e>
		{
		case MOTOR_1:
			Pwm_Start(PWM_CH1A_CH1B,Mot_Speed,250);
 4f2:	2a ef       	ldi	r18, 0xFA	; 250
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 8a 04 	call	0x914	; 0x914 <Pwm_Start>
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Start the motor.
*/
uint8_t Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed){
		uint8_t Err_Status = 0;
 500:	80 e0       	ldi	r24, 0x00	; 0
		switch (Motor_Number)
		{
		case MOTOR_1:
			Pwm_Start(PWM_CH1A_CH1B,Mot_Speed,250);
			break;
 502:	08 95       	ret
		case MOTOR_2:
			Pwm_Start(PWM_CH1A_CH1B,Mot_Speed,250);
 504:	2a ef       	ldi	r18, 0xFA	; 250
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 8a 04 	call	0x914	; 0x914 <Pwm_Start>
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Start the motor.
*/
uint8_t Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed){
		uint8_t Err_Status = 0;
 512:	80 e0       	ldi	r24, 0x00	; 0
		case MOTOR_1:
			Pwm_Start(PWM_CH1A_CH1B,Mot_Speed,250);
			break;
		case MOTOR_2:
			Pwm_Start(PWM_CH1A_CH1B,Mot_Speed,250);
			break;
 514:	08 95       	ret
		default:
			Err_Status =E_NOK;		
 516:	81 e0       	ldi	r24, 0x01	; 1
		}
	return Err_Status;
}
 518:	08 95       	ret

0000051a <Motor_SpeedUpdate>:
 * return 	 : ERROR_STATUS
 * Description: Controls the motor speed from getting the motor number and the speed.
*/
uint8_t Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed){
		uint8_t Err_Status = 0;
		switch (Motor_Number)
 51a:	82 30       	cpi	r24, 0x02	; 2
 51c:	61 f0       	breq	.+24     	; 0x536 <Motor_SpeedUpdate+0x1c>
 51e:	83 30       	cpi	r24, 0x03	; 3
 520:	99 f0       	breq	.+38     	; 0x548 <Motor_SpeedUpdate+0x2e>
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	d1 f4       	brne	.+52     	; 0x55a <Motor_SpeedUpdate+0x40>
		{
			case MOTOR_1:
				Pwm_Start(PWM_CH1A,Speed,250);
 526:	2a ef       	ldi	r18, 0xFA	; 250
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	40 e0       	ldi	r20, 0x00	; 0
 52c:	50 e0       	ldi	r21, 0x00	; 0
 52e:	0e 94 8a 04 	call	0x914	; 0x914 <Pwm_Start>
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Controls the motor speed from getting the motor number and the speed.
*/
uint8_t Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed){
		uint8_t Err_Status = 0;
 532:	80 e0       	ldi	r24, 0x00	; 0
		switch (Motor_Number)
		{
			case MOTOR_1:
				Pwm_Start(PWM_CH1A,Speed,250);
				break;
 534:	08 95       	ret
			case MOTOR_2:
				Pwm_Start(PWM_CH1B,Speed,250);
 536:	2a ef       	ldi	r18, 0xFA	; 250
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	0e 94 8a 04 	call	0x914	; 0x914 <Pwm_Start>
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Controls the motor speed from getting the motor number and the speed.
*/
uint8_t Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed){
		uint8_t Err_Status = 0;
 544:	80 e0       	ldi	r24, 0x00	; 0
			case MOTOR_1:
				Pwm_Start(PWM_CH1A,Speed,250);
				break;
			case MOTOR_2:
				Pwm_Start(PWM_CH1B,Speed,250);
				break;
 546:	08 95       	ret
			case MOTOR_1_2:
				Pwm_Start(PWM_CH1A_CH1B,Speed,250);
 548:	2a ef       	ldi	r18, 0xFA	; 250
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 8a 04 	call	0x914	; 0x914 <Pwm_Start>
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Controls the motor speed from getting the motor number and the speed.
*/
uint8_t Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed){
		uint8_t Err_Status = 0;
 556:	80 e0       	ldi	r24, 0x00	; 0
			case MOTOR_2:
				Pwm_Start(PWM_CH1B,Speed,250);
				break;
			case MOTOR_1_2:
				Pwm_Start(PWM_CH1A_CH1B,Speed,250);
				break;	
 558:	08 95       	ret
			default:
				Err_Status =E_NOK;
 55a:	81 e0       	ldi	r24, 0x01	; 1
		}
		return Err_Status;
}
 55c:	08 95       	ret

0000055e <Motor_Stop>:
*/
uint8_t Motor_Stop(uint8_t Motor_Number){
	
	 uint8_t Err_Status = 0;
	 
	 switch (Motor_Number)
 55e:	81 30       	cpi	r24, 0x01	; 1
 560:	19 f0       	breq	.+6      	; 0x568 <Motor_Stop+0xa>
 562:	82 30       	cpi	r24, 0x02	; 2
 564:	91 f0       	breq	.+36     	; 0x58a <Motor_Stop+0x2c>
 566:	22 c0       	rjmp	.+68     	; 0x5ac <Motor_Stop+0x4e>
	 {
		 case MOTOR_1:
			 DIO_Write(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, LOW);
 568:	40 e0       	ldi	r20, 0x00	; 0
 56a:	60 e1       	ldi	r22, 0x10	; 16
 56c:	83 e0       	ldi	r24, 0x03	; 3
 56e:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
			 DIO_Write(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	64 e0       	ldi	r22, 0x04	; 4
 576:	83 e0       	ldi	r24, 0x03	; 3
 578:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
			 DIO_Write(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	68 e0       	ldi	r22, 0x08	; 8
 580:	83 e0       	ldi	r24, 0x03	; 3
 582:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
 * return 	 : ERROR_STATUS
 * Description: stop the motor.
*/
uint8_t Motor_Stop(uint8_t Motor_Number){
	
	 uint8_t Err_Status = 0;
 586:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 case MOTOR_1:
			 DIO_Write(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, LOW);
			 DIO_Write(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
			 DIO_Write(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
			break;
 588:	08 95       	ret
		 case MOTOR_2:
			 DIO_Write(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, LOW);
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	60 e2       	ldi	r22, 0x20	; 32
 58e:	83 e0       	ldi	r24, 0x03	; 3
 590:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
			 DIO_Write(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
 594:	40 e0       	ldi	r20, 0x00	; 0
 596:	60 e4       	ldi	r22, 0x40	; 64
 598:	83 e0       	ldi	r24, 0x03	; 3
 59a:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
			 DIO_Write(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
 59e:	40 e0       	ldi	r20, 0x00	; 0
 5a0:	60 e8       	ldi	r22, 0x80	; 128
 5a2:	83 e0       	ldi	r24, 0x03	; 3
 5a4:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
 * return 	 : ERROR_STATUS
 * Description: stop the motor.
*/
uint8_t Motor_Stop(uint8_t Motor_Number){
	
	 uint8_t Err_Status = 0;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
			break;
		 case MOTOR_2:
			 DIO_Write(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, LOW);
			 DIO_Write(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
			 DIO_Write(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
			break;
 5aa:	08 95       	ret
		 default:
			Err_Status = E_NOK;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
	 }
	 
	 return  Err_Status;
}
 5ae:	08 95       	ret

000005b0 <Us_Init>:
uint8_t Us_Init(void){
	uint8_t Err_Status = 0;
	Err_Status=E_OK;
	
	//Initialize trigger us config structure
	DIO_Cfg_US_T.GPIO = U_S_Trigger_PORT;
 5b0:	e0 e9       	ldi	r30, 0x90	; 144
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	80 83       	st	Z, r24
	DIO_Cfg_US_T.pins = U_S_Trigger_PIN;
 5b8:	98 e0       	ldi	r25, 0x08	; 8
 5ba:	91 83       	std	Z+1, r25	; 0x01
	DIO_Cfg_US_T.dir  =  OUTPUT;
 5bc:	9f ef       	ldi	r25, 0xFF	; 255
 5be:	92 83       	std	Z+2, r25	; 0x02
	
	//Initialize Echo us config structure
	DIO_Cfg_US_E.GPIO = U_S_Echo_PORT;
 5c0:	ed e8       	ldi	r30, 0x8D	; 141
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 83       	st	Z, r24
	DIO_Cfg_US_E.pins = U_S_Echo_PIN;
 5c6:	84 e0       	ldi	r24, 0x04	; 4
 5c8:	81 83       	std	Z+1, r24	; 0x01
	DIO_Cfg_US_E.dir  = INPUT;
 5ca:	12 82       	std	Z+2, r1	; 0x02
	
	//use external interrupt 2 we will pass it in IC init()
	Icu_cfg_US.ICU_Ch_No = ICU_CH2; 
 5cc:	eb e8       	ldi	r30, 0x8B	; 139
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	80 83       	st	Z, r24
	//use Timer channel 0                    
	Icu_cfg_US.ICU_Ch_Timer = ICU_TIMER_CH2;
 5d4:	81 83       	std	Z+1, r24	; 0x01
	/*set trigger pin in ultrasonic as output pin*/
	DIO_init(&DIO_Cfg_US_T);
 5d6:	80 e9       	ldi	r24, 0x90	; 144
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 4e 03 	call	0x69c	; 0x69c <DIO_init>
	
	/*set echo pin in ultrasonic as input pin __external interrupt2__*/
	DIO_init(&DIO_Cfg_US_E);
 5de:	8d e8       	ldi	r24, 0x8D	; 141
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 4e 03 	call	0x69c	; 0x69c <DIO_init>
	
	//initiate the ICU to use it to calculate the On time of the ECHO signal
	Icu_Init(&Icu_cfg_US);
 5e6:	8b e8       	ldi	r24, 0x8B	; 139
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 94 09 01 	call	0x212	; 0x212 <Icu_Init>
	
	return Err_Status;
}
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	08 95       	ret

000005f2 <Us_Trigger>:
uint8_t Us_Trigger(void){
	uint8_t Err_Status = 0;
	Err_Status=E_OK;
	
	/*write zero on trigger input pin */
	DIO_Write(U_S_Trigger_PORT,U_S_Trigger_PIN,LOW);
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	68 e0       	ldi	r22, 0x08	; 8
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
	
	/*then write One to trigger pin to send wave at 40 KHZ*/
	DIO_Write(U_S_Trigger_PORT,U_S_Trigger_PIN,HIGH);
 5fc:	4f ef       	ldi	r20, 0xFF	; 255
 5fe:	68 e0       	ldi	r22, 0x08	; 8
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
 606:	8f e3       	ldi	r24, 0x3F	; 63
 608:	9c e9       	ldi	r25, 0x9C	; 156
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <Us_Trigger+0x18>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <Us_Trigger+0x1e>
 610:	00 00       	nop
	/*wait again for 10 milli seconds*/
	_delay_ms(10);
	/*After sending wave by trigger then write 0 to trigger pin again*/
	DIO_Write(U_S_Trigger_PORT,U_S_Trigger_PIN,LOW);
 612:	40 e0       	ldi	r20, 0x00	; 0
 614:	68 e0       	ldi	r22, 0x08	; 8
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	0e 94 a0 03 	call	0x740	; 0x740 <DIO_Write>
	
	return Err_Status;
}
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	08 95       	ret

00000620 <Us_GetDistance>:
 *                    use it to calculate the distance, then return the value in the              *
 *                    Distance parameter.                                                         *
 *************************************************************************************************/


uint8_t Us_GetDistance(uint16_t *Distance){
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	ec 01       	movw	r28, r24
	uint8_t Err_Status = 0;
	
	Icu_ReadTime(ICU_TIMER_CH2,ICU_RISE_TO_FALL,Icu_Time);
 626:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <Icu_Time>
 62a:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <Icu_Time+0x1>
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	82 e0       	ldi	r24, 0x02	; 2
 632:	0e 94 45 01 	call	0x28a	; 0x28a <Icu_ReadTime>
	
	*Distance = (uint16_t) ((64*(*Icu_Time))/58);      //prescaler 1024
 636:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <Icu_Time>
 63a:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <Icu_Time+0x1>
 63e:	80 81       	ld	r24, Z
 640:	91 81       	ldd	r25, Z+1	; 0x01
 642:	a2 81       	ldd	r26, Z+2	; 0x02
 644:	b3 81       	ldd	r27, Z+3	; 0x03
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	aa 1f       	adc	r26, r26
 64c:	bb 1f       	adc	r27, r27
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	aa 1f       	adc	r26, r26
 654:	bb 1f       	adc	r27, r27
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	aa 1f       	adc	r26, r26
 65c:	bb 1f       	adc	r27, r27
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	aa 1f       	adc	r26, r26
 664:	bb 1f       	adc	r27, r27
 666:	bc 01       	movw	r22, r24
 668:	cd 01       	movw	r24, r26
 66a:	66 0f       	add	r22, r22
 66c:	77 1f       	adc	r23, r23
 66e:	88 1f       	adc	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	66 0f       	add	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	88 1f       	adc	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	2a e3       	ldi	r18, 0x3A	; 58
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	40 e0       	ldi	r20, 0x00	; 0
 680:	50 e0       	ldi	r21, 0x00	; 0
 682:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 686:	39 83       	std	Y+1, r19	; 0x01
 688:	28 83       	st	Y, r18

	//distance = (uint16_t)(0.272*TCNT0);     //prescaler 256
	//distance = (uint16_t) ((68*((gu_IC_SW)))/1000); // prescaler 64
	// ((1088*((*Icu_Time)))/1000);   //prescaling 1024
	return Err_Status;
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	08 95       	ret

00000692 <main>:
int main(void)
{
	
/*********************************** Car Application ***********************************/
//Initialize the Car state machine with speed 30%
Car_SM_Init();
 692:	0e 94 49 00 	call	0x92	; 0x92 <Car_SM_Init>
while(1)
{
	/****Trigger ultrasonic module and change the car 
	state according to ultrasonic distance****/
	
	Car_SM_Update();
 696:	0e 94 53 00 	call	0xa6	; 0xa6 <Car_SM_Update>
 69a:	fd cf       	rjmp	.-6      	; 0x696 <main+0x4>

0000069c <DIO_init>:
*Output: No output
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/
uint8_t DIO_init (DIO_Cfg_s *DIO_info){
 69c:	fc 01       	movw	r30, r24
	uint8_t Err_Status = 0;
	uint8_t GPIO_NAME= DIO_info->GPIO;
	uint8_t GPIO_DIR = DIO_info->dir;
 69e:	92 81       	ldd	r25, Z+2	; 0x02
	uint8_t GPIO_PINS = DIO_info->pins;
 6a0:	21 81       	ldd	r18, Z+1	; 0x01
	
	switch (GPIO_NAME)
 6a2:	80 81       	ld	r24, Z
 6a4:	81 30       	cpi	r24, 0x01	; 1
 6a6:	a9 f0       	breq	.+42     	; 0x6d2 <DIO_init+0x36>
 6a8:	28 f0       	brcs	.+10     	; 0x6b4 <DIO_init+0x18>
 6aa:	82 30       	cpi	r24, 0x02	; 2
 6ac:	09 f1       	breq	.+66     	; 0x6f0 <DIO_init+0x54>
 6ae:	83 30       	cpi	r24, 0x03	; 3
 6b0:	71 f1       	breq	.+92     	; 0x70e <DIO_init+0x72>
 6b2:	3c c0       	rjmp	.+120    	; 0x72c <DIO_init+0x90>
	{
		case GPIOA:
			if(GPIO_DIR==OUTPUT){
 6b4:	9f 3f       	cpi	r25, 0xFF	; 255
 6b6:	29 f4       	brne	.+10     	; 0x6c2 <DIO_init+0x26>
				PORTA_DIR |= GPIO_PINS;
 6b8:	8a b3       	in	r24, 0x1a	; 26
 6ba:	28 2b       	or	r18, r24
 6bc:	2a bb       	out	0x1a, r18	; 26
			}else if (GPIO_DIR==INPUT)
			{
				PORTA_DIR &=~ GPIO_PINS;
			}
			Err_Status =E_OK;
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	08 95       	ret
	switch (GPIO_NAME)
	{
		case GPIOA:
			if(GPIO_DIR==OUTPUT){
				PORTA_DIR |= GPIO_PINS;
			}else if (GPIO_DIR==INPUT)
 6c2:	91 11       	cpse	r25, r1
 6c4:	35 c0       	rjmp	.+106    	; 0x730 <DIO_init+0x94>
			{
				PORTA_DIR &=~ GPIO_PINS;
 6c6:	8a b3       	in	r24, 0x1a	; 26
 6c8:	20 95       	com	r18
 6ca:	28 23       	and	r18, r24
 6cc:	2a bb       	out	0x1a, r18	; 26
			}
			Err_Status =E_OK;
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	08 95       	ret
			break;
		case GPIOB:
			if(GPIO_DIR==OUTPUT){
 6d2:	9f 3f       	cpi	r25, 0xFF	; 255
 6d4:	29 f4       	brne	.+10     	; 0x6e0 <DIO_init+0x44>
				PORTB_DIR |= GPIO_PINS;
 6d6:	87 b3       	in	r24, 0x17	; 23
 6d8:	28 2b       	or	r18, r24
 6da:	27 bb       	out	0x17, r18	; 23
			}else if (GPIO_DIR==INPUT)
			{
				PORTB_DIR &=~ GPIO_PINS;
			}
			Err_Status =E_OK;
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	08 95       	ret
			Err_Status =E_OK;
			break;
		case GPIOB:
			if(GPIO_DIR==OUTPUT){
				PORTB_DIR |= GPIO_PINS;
			}else if (GPIO_DIR==INPUT)
 6e0:	91 11       	cpse	r25, r1
 6e2:	28 c0       	rjmp	.+80     	; 0x734 <DIO_init+0x98>
			{
				PORTB_DIR &=~ GPIO_PINS;
 6e4:	87 b3       	in	r24, 0x17	; 23
 6e6:	20 95       	com	r18
 6e8:	28 23       	and	r18, r24
 6ea:	27 bb       	out	0x17, r18	; 23
			}
			Err_Status =E_OK;
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	08 95       	ret
			break;
		case GPIOC:
			if(GPIO_DIR==OUTPUT){
 6f0:	9f 3f       	cpi	r25, 0xFF	; 255
 6f2:	29 f4       	brne	.+10     	; 0x6fe <DIO_init+0x62>
				PORTC_DIR |= GPIO_PINS;
 6f4:	84 b3       	in	r24, 0x14	; 20
 6f6:	28 2b       	or	r18, r24
 6f8:	24 bb       	out	0x14, r18	; 20
			}else if (GPIO_DIR==INPUT)
			{
				PORTC_DIR &=~ GPIO_PINS;
			}
			Err_Status =E_OK;
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	08 95       	ret
			Err_Status =E_OK;
			break;
		case GPIOC:
			if(GPIO_DIR==OUTPUT){
				PORTC_DIR |= GPIO_PINS;
			}else if (GPIO_DIR==INPUT)
 6fe:	91 11       	cpse	r25, r1
 700:	1b c0       	rjmp	.+54     	; 0x738 <DIO_init+0x9c>
			{
				PORTC_DIR &=~ GPIO_PINS;
 702:	84 b3       	in	r24, 0x14	; 20
 704:	20 95       	com	r18
 706:	28 23       	and	r18, r24
 708:	24 bb       	out	0x14, r18	; 20
			}
			Err_Status =E_OK;
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	08 95       	ret
			break;
		case GPIOD:
			if(GPIO_DIR==OUTPUT){
 70e:	9f 3f       	cpi	r25, 0xFF	; 255
 710:	29 f4       	brne	.+10     	; 0x71c <DIO_init+0x80>
				PORTD_DIR |= GPIO_PINS;
 712:	81 b3       	in	r24, 0x11	; 17
 714:	28 2b       	or	r18, r24
 716:	21 bb       	out	0x11, r18	; 17
			}else if (GPIO_DIR==INPUT)
			{
				PORTD_DIR &=~ GPIO_PINS;
			}
			Err_Status =E_OK;
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	08 95       	ret
			Err_Status =E_OK;
			break;
		case GPIOD:
			if(GPIO_DIR==OUTPUT){
				PORTD_DIR |= GPIO_PINS;
			}else if (GPIO_DIR==INPUT)
 71c:	91 11       	cpse	r25, r1
 71e:	0e c0       	rjmp	.+28     	; 0x73c <DIO_init+0xa0>
			{
				PORTD_DIR &=~ GPIO_PINS;
 720:	81 b3       	in	r24, 0x11	; 17
 722:	20 95       	com	r18
 724:	28 23       	and	r18, r24
 726:	21 bb       	out	0x11, r18	; 17
			}
			Err_Status =E_OK;
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	08 95       	ret
			break;
		default:
			Err_Status =E_NOK;
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	08 95       	ret
				PORTA_DIR |= GPIO_PINS;
			}else if (GPIO_DIR==INPUT)
			{
				PORTA_DIR &=~ GPIO_PINS;
			}
			Err_Status =E_OK;
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	08 95       	ret
				PORTB_DIR |= GPIO_PINS;
			}else if (GPIO_DIR==INPUT)
			{
				PORTB_DIR &=~ GPIO_PINS;
			}
			Err_Status =E_OK;
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	08 95       	ret
				PORTC_DIR |= GPIO_PINS;
			}else if (GPIO_DIR==INPUT)
			{
				PORTC_DIR &=~ GPIO_PINS;
			}
			Err_Status =E_OK;
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	08 95       	ret
				PORTD_DIR |= GPIO_PINS;
			}else if (GPIO_DIR==INPUT)
			{
				PORTD_DIR &=~ GPIO_PINS;
			}
			Err_Status =E_OK;
 73c:	80 e0       	ldi	r24, 0x00	; 0
		default:
			Err_Status =E_NOK;
	}
	
return Err_Status;	
}
 73e:	08 95       	ret

00000740 <DIO_Write>:
* 			  or even one pin.
*/
uint8_t DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value){
	uint8_t Err_Status = 0;
	
	switch (GPIO)
 740:	81 30       	cpi	r24, 0x01	; 1
 742:	a9 f0       	breq	.+42     	; 0x76e <DIO_Write+0x2e>
 744:	28 f0       	brcs	.+10     	; 0x750 <DIO_Write+0x10>
 746:	82 30       	cpi	r24, 0x02	; 2
 748:	09 f1       	breq	.+66     	; 0x78c <DIO_Write+0x4c>
 74a:	83 30       	cpi	r24, 0x03	; 3
 74c:	71 f1       	breq	.+92     	; 0x7aa <DIO_Write+0x6a>
 74e:	3c c0       	rjmp	.+120    	; 0x7c8 <DIO_Write+0x88>
	{
		case GPIOA:
			if(value==HIGH){
 750:	4f 3f       	cpi	r20, 0xFF	; 255
 752:	29 f4       	brne	.+10     	; 0x75e <DIO_Write+0x1e>
				PORTA_DATA |= pins;
 754:	8b b3       	in	r24, 0x1b	; 27
 756:	68 2b       	or	r22, r24
 758:	6b bb       	out	0x1b, r22	; 27
			}else if (value==LOW)
			{
				PORTA_DATA &=~ pins;
			}
			Err_Status =E_OK;
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	08 95       	ret
	switch (GPIO)
	{
		case GPIOA:
			if(value==HIGH){
				PORTA_DATA |= pins;
			}else if (value==LOW)
 75e:	41 11       	cpse	r20, r1
 760:	35 c0       	rjmp	.+106    	; 0x7cc <DIO_Write+0x8c>
			{
				PORTA_DATA &=~ pins;
 762:	8b b3       	in	r24, 0x1b	; 27
 764:	60 95       	com	r22
 766:	68 23       	and	r22, r24
 768:	6b bb       	out	0x1b, r22	; 27
			}
			Err_Status =E_OK;
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	08 95       	ret
			break;
		case GPIOB:
			if(value==HIGH){
 76e:	4f 3f       	cpi	r20, 0xFF	; 255
 770:	29 f4       	brne	.+10     	; 0x77c <DIO_Write+0x3c>
				PORTB_DATA |= pins;
 772:	88 b3       	in	r24, 0x18	; 24
 774:	68 2b       	or	r22, r24
 776:	68 bb       	out	0x18, r22	; 24
			}else if (value==LOW)
			{
				PORTB_DATA &=~ pins;
			}
			Err_Status =E_OK;
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	08 95       	ret
			Err_Status =E_OK;
			break;
		case GPIOB:
			if(value==HIGH){
				PORTB_DATA |= pins;
			}else if (value==LOW)
 77c:	41 11       	cpse	r20, r1
 77e:	28 c0       	rjmp	.+80     	; 0x7d0 <DIO_Write+0x90>
			{
				PORTB_DATA &=~ pins;
 780:	88 b3       	in	r24, 0x18	; 24
 782:	60 95       	com	r22
 784:	68 23       	and	r22, r24
 786:	68 bb       	out	0x18, r22	; 24
			}
			Err_Status =E_OK;
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	08 95       	ret
			break;
		case GPIOC:
			if(value==HIGH){
 78c:	4f 3f       	cpi	r20, 0xFF	; 255
 78e:	29 f4       	brne	.+10     	; 0x79a <DIO_Write+0x5a>
				PORTC_DATA |= pins;
 790:	85 b3       	in	r24, 0x15	; 21
 792:	68 2b       	or	r22, r24
 794:	65 bb       	out	0x15, r22	; 21
			}else if (value==LOW)
			{
				PORTC_DATA &=~ pins;
			}
			Err_Status =E_OK;
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	08 95       	ret
			Err_Status =E_OK;
			break;
		case GPIOC:
			if(value==HIGH){
				PORTC_DATA |= pins;
			}else if (value==LOW)
 79a:	41 11       	cpse	r20, r1
 79c:	1b c0       	rjmp	.+54     	; 0x7d4 <DIO_Write+0x94>
			{
				PORTC_DATA &=~ pins;
 79e:	85 b3       	in	r24, 0x15	; 21
 7a0:	60 95       	com	r22
 7a2:	68 23       	and	r22, r24
 7a4:	65 bb       	out	0x15, r22	; 21
			}
			Err_Status =E_OK;
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	08 95       	ret
			break;
		case GPIOD:
			if(value==HIGH){
 7aa:	4f 3f       	cpi	r20, 0xFF	; 255
 7ac:	29 f4       	brne	.+10     	; 0x7b8 <DIO_Write+0x78>
				PORTD_DATA |= pins;
 7ae:	82 b3       	in	r24, 0x12	; 18
 7b0:	68 2b       	or	r22, r24
 7b2:	62 bb       	out	0x12, r22	; 18
			}else if (value==LOW)
			{
				PORTD_DATA &=~ pins;
			}
			Err_Status =E_OK;
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	08 95       	ret
			Err_Status =E_OK;
			break;
		case GPIOD:
			if(value==HIGH){
				PORTD_DATA |= pins;
			}else if (value==LOW)
 7b8:	41 11       	cpse	r20, r1
 7ba:	0e c0       	rjmp	.+28     	; 0x7d8 <DIO_Write+0x98>
			{
				PORTD_DATA &=~ pins;
 7bc:	82 b3       	in	r24, 0x12	; 18
 7be:	60 95       	com	r22
 7c0:	68 23       	and	r22, r24
 7c2:	62 bb       	out	0x12, r22	; 18
			}
			Err_Status =E_OK;
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	08 95       	ret
			break;
		default:
			Err_Status =E_NOK;
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	08 95       	ret
				PORTA_DATA |= pins;
			}else if (value==LOW)
			{
				PORTA_DATA &=~ pins;
			}
			Err_Status =E_OK;
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	08 95       	ret
				PORTB_DATA |= pins;
			}else if (value==LOW)
			{
				PORTB_DATA &=~ pins;
			}
			Err_Status =E_OK;
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	08 95       	ret
				PORTC_DATA |= pins;
			}else if (value==LOW)
			{
				PORTC_DATA &=~ pins;
			}
			Err_Status =E_OK;
 7d4:	80 e0       	ldi	r24, 0x00	; 0
 7d6:	08 95       	ret
				PORTD_DATA |= pins;
			}else if (value==LOW)
			{
				PORTD_DATA &=~ pins;
			}
			Err_Status =E_OK;
 7d8:	80 e0       	ldi	r24, 0x00	; 0
		default:
			Err_Status =E_NOK;
	}
	
	return Err_Status;
}
 7da:	08 95       	ret

000007dc <EINT2_Enable>:
#include "Dio.h"
#include "extint.h"


void EINT2_Enable(void){
	GICR|=(1<<5);
 7dc:	8b b7       	in	r24, 0x3b	; 59
 7de:	80 62       	ori	r24, 0x20	; 32
 7e0:	8b bf       	out	0x3b, r24	; 59
 7e2:	08 95       	ret

000007e4 <EINT2_Disable>:
}


void EINT2_Disable(void){
	GICR &=~(1<<5);		//clear the INT2 in GICR Register to disable external interrupt module
 7e4:	8b b7       	in	r24, 0x3b	; 59
 7e6:	8f 7d       	andi	r24, 0xDF	; 223
 7e8:	8b bf       	out	0x3b, r24	; 59
 7ea:	08 95       	ret

000007ec <EINT2_R_s_Edge>:
}


void EINT2_R_s_Edge(void){
	//MCUCSR|= (1<<BIT6);			//set the ISC2 in MCUCSR Register to set ext as rising edge	
	MCUCSR|= (1<<6);
 7ec:	84 b7       	in	r24, 0x34	; 52
 7ee:	80 64       	ori	r24, 0x40	; 64
 7f0:	84 bf       	out	0x34, r24	; 52
 7f2:	08 95       	ret

000007f4 <EINT2_Falling_Edge>:
}

void EINT2_Falling_Edge(void){
	MCUCSR &= ~(1<<6);				//clear the ISC2 in MCUCSR Register to set ext as falling edge	
 7f4:	84 b7       	in	r24, 0x34	; 52
 7f6:	8f 7b       	andi	r24, 0xBF	; 191
 7f8:	84 bf       	out	0x34, r24	; 52
 7fa:	08 95       	ret

000007fc <Pwm_Init>:
/* Input parameters: Pwm_Cfg Structure (channel number, Prescaler)               */
/* Return type : void                                                            */
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/	
uint8_t Pwm_Init(Pwm_Cfg_s *Pwm_Cfg){
 7fc:	dc 01       	movw	r26, r24
	uint8_t	Er_Status=0;
	uint8_t PWM_CH = Pwm_Cfg->Channel;
 7fe:	3c 91       	ld	r19, X
	
	DIO_Cfg_S_PWM0.GPIO = T0_PWM_GPIO;
 800:	ec e9       	ldi	r30, 0x9C	; 156
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	80 83       	st	Z, r24
	DIO_Cfg_S_PWM0.dir  = OUTPUT;
 808:	9f ef       	ldi	r25, 0xFF	; 255
 80a:	92 83       	std	Z+2, r25	; 0x02
	DIO_Cfg_S_PWM0.pins = T0_PWM_BIT;
 80c:	88 e0       	ldi	r24, 0x08	; 8
 80e:	81 83       	std	Z+1, r24	; 0x01
	
	DIO_Cfg_S_PWM1_A.GPIO = T1A_PWM_GPIO;
 810:	e6 e9       	ldi	r30, 0x96	; 150
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	23 e0       	ldi	r18, 0x03	; 3
 816:	20 83       	st	Z, r18
	DIO_Cfg_S_PWM1_A.dir  = OUTPUT;
 818:	92 83       	std	Z+2, r25	; 0x02
	DIO_Cfg_S_PWM1_A.pins = T1A_PWM_BIT;
 81a:	80 e1       	ldi	r24, 0x10	; 16
 81c:	81 83       	std	Z+1, r24	; 0x01
	
	DIO_Cfg_S_PWM1_B.GPIO = T1B_PWM_GPIO;
 81e:	e3 e9       	ldi	r30, 0x93	; 147
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	20 83       	st	Z, r18
	DIO_Cfg_S_PWM1_B.dir  = OUTPUT;
 824:	92 83       	std	Z+2, r25	; 0x02
	DIO_Cfg_S_PWM1_B.pins = T1B_PWM_BIT;
 826:	80 e2       	ldi	r24, 0x20	; 32
 828:	81 83       	std	Z+1, r24	; 0x01
	
	DIO_Cfg_S_PWM2.GPIO = T2_PWM_GPIO;
 82a:	e9 e9       	ldi	r30, 0x99	; 153
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	20 83       	st	Z, r18
	DIO_Cfg_S_PWM2.dir  = OUTPUT;
 830:	92 83       	std	Z+2, r25	; 0x02
	DIO_Cfg_S_PWM2.pins = T2_PWM_BIT;
 832:	80 e8       	ldi	r24, 0x80	; 128
 834:	81 83       	std	Z+1, r24	; 0x01
	
	
	if (Pwm_Cfg == NULL)
 836:	ab 2b       	or	r26, r27
 838:	09 f4       	brne	.+2      	; 0x83c <Pwm_Init+0x40>
 83a:	68 c0       	rjmp	.+208    	; 0x90c <__stack+0xad>
	{
		Er_Status = E_NOK;
	} 
	else
	{	
	switch (PWM_CH)
 83c:	32 30       	cpi	r19, 0x02	; 2
 83e:	c1 f1       	breq	.+112    	; 0x8b0 <__stack+0x51>
 840:	18 f4       	brcc	.+6      	; 0x848 <Pwm_Init+0x4c>
 842:	31 30       	cpi	r19, 0x01	; 1
 844:	69 f0       	breq	.+26     	; 0x860 <__stack+0x1>
 846:	64 c0       	rjmp	.+200    	; 0x910 <__stack+0xb1>
 848:	33 30       	cpi	r19, 0x03	; 3
 84a:	09 f4       	brne	.+2      	; 0x84e <Pwm_Init+0x52>
 84c:	59 c0       	rjmp	.+178    	; 0x900 <__stack+0xa1>
 84e:	34 30       	cpi	r19, 0x04	; 4
 850:	09 f0       	breq	.+2      	; 0x854 <Pwm_Init+0x58>
 852:	5e c0       	rjmp	.+188    	; 0x910 <__stack+0xb1>
	{
		case PWM_CH0:
			//OC0 pin for PWm on timer0
			DIO_init(&DIO_Cfg_S_PWM0);
 854:	8c e9       	ldi	r24, 0x9C	; 156
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 4e 03 	call	0x69c	; 0x69c <DIO_init>
			Er_Status = E_OK;
 85c:	80 e0       	ldi	r24, 0x00	; 0
			break;
 85e:	08 95       	ret
		case PWM_CH1A:
			//OC1A pin for PWm on timer1
			DIO_init(&DIO_Cfg_S_PWM1_A);
 860:	86 e9       	ldi	r24, 0x96	; 150
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 4e 03 	call	0x69c	; 0x69c <DIO_init>
			TCCR1|= T1_FAST_PWM_MODE_ICR1_TOP;
 868:	8e b5       	in	r24, 0x2e	; 46
 86a:	9f b5       	in	r25, 0x2f	; 47
 86c:	88 61       	ori	r24, 0x18	; 24
 86e:	92 60       	ori	r25, 0x02	; 2
 870:	9f bd       	out	0x2f, r25	; 47
 872:	8e bd       	out	0x2e, r24	; 46
			TCCR1|=	T1_OC1A_CLEAR;
 874:	8e b5       	in	r24, 0x2e	; 46
 876:	9f b5       	in	r25, 0x2f	; 47
 878:	90 68       	ori	r25, 0x80	; 128
 87a:	9f bd       	out	0x2f, r25	; 47
 87c:	8e bd       	out	0x2e, r24	; 46
			TCCR1|= PWM_PRESCALER_1024;
 87e:	8e b5       	in	r24, 0x2e	; 46
 880:	9f b5       	in	r25, 0x2f	; 47
 882:	85 60       	ori	r24, 0x05	; 5
 884:	9f bd       	out	0x2f, r25	; 47
 886:	8e bd       	out	0x2e, r24	; 46
			TCNT1|=InitialValue;
 888:	8c b5       	in	r24, 0x2c	; 44
 88a:	9d b5       	in	r25, 0x2d	; 45
 88c:	9d bd       	out	0x2d, r25	; 45
 88e:	8c bd       	out	0x2c, r24	; 44
			OCR1A|=InitialValue;
 890:	8a b5       	in	r24, 0x2a	; 42
 892:	9b b5       	in	r25, 0x2b	; 43
 894:	9b bd       	out	0x2b, r25	; 43
 896:	8a bd       	out	0x2a, r24	; 42
			OCR1B|=InitialValue;
 898:	88 b5       	in	r24, 0x28	; 40
 89a:	99 b5       	in	r25, 0x29	; 41
 89c:	99 bd       	out	0x29, r25	; 41
 89e:	88 bd       	out	0x28, r24	; 40
			ICR1 |=InitialValue;
 8a0:	86 b5       	in	r24, 0x26	; 38
 8a2:	97 b5       	in	r25, 0x27	; 39
 8a4:	97 bd       	out	0x27, r25	; 39
 8a6:	86 bd       	out	0x26, r24	; 38
			TIMSK|=T1_POLLING;
 8a8:	89 b7       	in	r24, 0x39	; 57
 8aa:	89 bf       	out	0x39, r24	; 57
			Er_Status = E_OK;
 8ac:	80 e0       	ldi	r24, 0x00	; 0
			break;
 8ae:	08 95       	ret
		case PWM_CH1B:
			//OC1B pin for PWm on timer1
			DIO_init(&DIO_Cfg_S_PWM1_B);
 8b0:	83 e9       	ldi	r24, 0x93	; 147
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 94 4e 03 	call	0x69c	; 0x69c <DIO_init>
			TCCR1|= T1_FAST_PWM_MODE_ICR1_TOP;
 8b8:	8e b5       	in	r24, 0x2e	; 46
 8ba:	9f b5       	in	r25, 0x2f	; 47
 8bc:	88 61       	ori	r24, 0x18	; 24
 8be:	92 60       	ori	r25, 0x02	; 2
 8c0:	9f bd       	out	0x2f, r25	; 47
 8c2:	8e bd       	out	0x2e, r24	; 46
			TCCR1|= T1_OC1B_CLEAR;
 8c4:	8e b5       	in	r24, 0x2e	; 46
 8c6:	9f b5       	in	r25, 0x2f	; 47
 8c8:	90 62       	ori	r25, 0x20	; 32
 8ca:	9f bd       	out	0x2f, r25	; 47
 8cc:	8e bd       	out	0x2e, r24	; 46
			TCCR1|= PWM_PRESCALER_1024;
 8ce:	8e b5       	in	r24, 0x2e	; 46
 8d0:	9f b5       	in	r25, 0x2f	; 47
 8d2:	85 60       	ori	r24, 0x05	; 5
 8d4:	9f bd       	out	0x2f, r25	; 47
 8d6:	8e bd       	out	0x2e, r24	; 46
			TCNT1|=InitialValue;
 8d8:	8c b5       	in	r24, 0x2c	; 44
 8da:	9d b5       	in	r25, 0x2d	; 45
 8dc:	9d bd       	out	0x2d, r25	; 45
 8de:	8c bd       	out	0x2c, r24	; 44
			OCR1A|=InitialValue;
 8e0:	8a b5       	in	r24, 0x2a	; 42
 8e2:	9b b5       	in	r25, 0x2b	; 43
 8e4:	9b bd       	out	0x2b, r25	; 43
 8e6:	8a bd       	out	0x2a, r24	; 42
			OCR1B|=InitialValue;
 8e8:	88 b5       	in	r24, 0x28	; 40
 8ea:	99 b5       	in	r25, 0x29	; 41
 8ec:	99 bd       	out	0x29, r25	; 41
 8ee:	88 bd       	out	0x28, r24	; 40
			ICR1 |=InitialValue;
 8f0:	86 b5       	in	r24, 0x26	; 38
 8f2:	97 b5       	in	r25, 0x27	; 39
 8f4:	97 bd       	out	0x27, r25	; 39
 8f6:	86 bd       	out	0x26, r24	; 38
			TIMSK|=T1_POLLING;
 8f8:	89 b7       	in	r24, 0x39	; 57
 8fa:	89 bf       	out	0x39, r24	; 57
			Er_Status = E_OK;
 8fc:	80 e0       	ldi	r24, 0x00	; 0
			break;
 8fe:	08 95       	ret
		case PWM_CH2:
			//OC2 pin for PWm on timer2
			DIO_init(&DIO_Cfg_S_PWM2);
 900:	89 e9       	ldi	r24, 0x99	; 153
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 4e 03 	call	0x69c	; 0x69c <DIO_init>
			Er_Status = E_OK;
 908:	80 e0       	ldi	r24, 0x00	; 0
			break;	
 90a:	08 95       	ret
	DIO_Cfg_S_PWM2.pins = T2_PWM_BIT;
	
	
	if (Pwm_Cfg == NULL)
	{
		Er_Status = E_NOK;
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	08 95       	ret
			//OC2 pin for PWm on timer2
			DIO_init(&DIO_Cfg_S_PWM2);
			Er_Status = E_OK;
			break;	
		default:
			Er_Status = E_NOK;
 910:	81 e0       	ldi	r24, 0x01	; 1
	}
	}
	return Er_Status;
}
 912:	08 95       	ret

00000914 <Pwm_Start>:
/* Return type : Error State                                                     */
/*                                                                               */
/* Description: starts the PWM on the dedicated channel with the required duty   */
/*				cycle and frequency                                              */
/*********************************************************************************/
uint8_t Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy){
 914:	cf 92       	push	r12
 916:	df 92       	push	r13
 918:	ef 92       	push	r14
 91a:	ff 92       	push	r15
 91c:	0f 93       	push	r16
 91e:	1f 93       	push	r17
 920:	cf 93       	push	r28
 922:	c6 2f       	mov	r28, r22
	uint8_t	Er_Status = 0;
	uint8_t value = 0;
	switch (Channel)
 924:	82 30       	cpi	r24, 0x02	; 2
 926:	09 f4       	brne	.+2      	; 0x92a <Pwm_Start+0x16>
 928:	45 c0       	rjmp	.+138    	; 0x9b4 <Pwm_Start+0xa0>
 92a:	30 f4       	brcc	.+12     	; 0x938 <Pwm_Start+0x24>
 92c:	88 23       	and	r24, r24
 92e:	09 f4       	brne	.+2      	; 0x932 <Pwm_Start+0x1e>
 930:	7d c0       	rjmp	.+250    	; 0xa2c <Pwm_Start+0x118>
 932:	81 30       	cpi	r24, 0x01	; 1
 934:	49 f0       	breq	.+18     	; 0x948 <Pwm_Start+0x34>
 936:	06 c0       	rjmp	.+12     	; 0x944 <Pwm_Start+0x30>
 938:	83 30       	cpi	r24, 0x03	; 3
 93a:	09 f4       	brne	.+2      	; 0x93e <Pwm_Start+0x2a>
 93c:	71 c0       	rjmp	.+226    	; 0xa20 <Pwm_Start+0x10c>
 93e:	84 30       	cpi	r24, 0x04	; 4
 940:	09 f4       	brne	.+2      	; 0x944 <Pwm_Start+0x30>
 942:	aa c0       	rjmp	.+340    	; 0xa98 <Pwm_Start+0x184>
			OCR1B=(uint8_t)value*((float)Duty/100.0);
			//DIO_init(&DIO_Cfg_S_PWM2);
			Er_Status = E_OK;
			break;
		default:
			Er_Status = E_NOK;
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	a9 c0       	rjmp	.+338    	; 0xa9a <Pwm_Start+0x186>

			Er_Status = E_OK;
			break;
		case PWM_CH1A:
			//calculate the value of the period of PWM signal
			value=(uint8_t)(F_CPU/((2*1024*Frequncy)))-1;
 948:	01 2e       	mov	r0, r17
 94a:	1b e0       	ldi	r17, 0x0B	; 11
 94c:	22 0f       	add	r18, r18
 94e:	33 1f       	adc	r19, r19
 950:	44 1f       	adc	r20, r20
 952:	55 1f       	adc	r21, r21
 954:	1a 95       	dec	r17
 956:	d1 f7       	brne	.-12     	; 0x94c <Pwm_Start+0x38>
 958:	10 2d       	mov	r17, r0
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	74 e2       	ldi	r23, 0x24	; 36
 95e:	84 ef       	ldi	r24, 0xF4	; 244
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 966:	21 50       	subi	r18, 0x01	; 1
			ICR1 = value;
 968:	02 2f       	mov	r16, r18
 96a:	10 e0       	ldi	r17, 0x00	; 0
 96c:	17 bd       	out	0x27, r17	; 39
 96e:	06 bd       	out	0x26, r16	; 38
			//set duty cycle of the first generated signal
			OCR1A=(uint8_t)value*((float)Duty/100.0);
 970:	6c 2f       	mov	r22, r28
 972:	70 e0       	ldi	r23, 0x00	; 0
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
 97c:	20 e0       	ldi	r18, 0x00	; 0
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	48 ec       	ldi	r20, 0xC8	; 200
 982:	52 e4       	ldi	r21, 0x42	; 66
 984:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__divsf3>
 988:	6b 01       	movw	r12, r22
 98a:	7c 01       	movw	r14, r24
 98c:	b8 01       	movw	r22, r16
 98e:	11 0f       	add	r17, r17
 990:	88 0b       	sbc	r24, r24
 992:	99 0b       	sbc	r25, r25
 994:	0e 94 a2 06 	call	0xd44	; 0xd44 <__floatsisf>
 998:	9b 01       	movw	r18, r22
 99a:	ac 01       	movw	r20, r24
 99c:	c7 01       	movw	r24, r14
 99e:	b6 01       	movw	r22, r12
 9a0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3>
 9a4:	0e 94 71 06 	call	0xce2	; 0xce2 <__fixunssfsi>
 9a8:	7b bd       	out	0x2b, r23	; 43
 9aa:	6a bd       	out	0x2a, r22	; 42
			OCR1B=(uint8_t)value*((float)Duty/100.0);
 9ac:	79 bd       	out	0x29, r23	; 41
 9ae:	68 bd       	out	0x28, r22	; 40
			Er_Status = E_OK;
 9b0:	80 e0       	ldi	r24, 0x00	; 0
			break;
 9b2:	73 c0       	rjmp	.+230    	; 0xa9a <Pwm_Start+0x186>
		case PWM_CH1B:
			//calculate the value of the period of PWM signal
			value=(uint8_t)(F_CPU/((2*1024*Frequncy)))-1;
 9b4:	01 2e       	mov	r0, r17
 9b6:	1b e0       	ldi	r17, 0x0B	; 11
 9b8:	22 0f       	add	r18, r18
 9ba:	33 1f       	adc	r19, r19
 9bc:	44 1f       	adc	r20, r20
 9be:	55 1f       	adc	r21, r21
 9c0:	1a 95       	dec	r17
 9c2:	d1 f7       	brne	.-12     	; 0x9b8 <Pwm_Start+0xa4>
 9c4:	10 2d       	mov	r17, r0
 9c6:	60 e0       	ldi	r22, 0x00	; 0
 9c8:	74 e2       	ldi	r23, 0x24	; 36
 9ca:	84 ef       	ldi	r24, 0xF4	; 244
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 9d2:	21 50       	subi	r18, 0x01	; 1
			ICR1 = value;
 9d4:	02 2f       	mov	r16, r18
 9d6:	10 e0       	ldi	r17, 0x00	; 0
 9d8:	17 bd       	out	0x27, r17	; 39
 9da:	06 bd       	out	0x26, r16	; 38
			//set duty cycle of the second generated signal
			OCR1A=(uint8_t)value*((float)Duty/100.0);
 9dc:	6c 2f       	mov	r22, r28
 9de:	70 e0       	ldi	r23, 0x00	; 0
 9e0:	80 e0       	ldi	r24, 0x00	; 0
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
 9e8:	20 e0       	ldi	r18, 0x00	; 0
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	48 ec       	ldi	r20, 0xC8	; 200
 9ee:	52 e4       	ldi	r21, 0x42	; 66
 9f0:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__divsf3>
 9f4:	6b 01       	movw	r12, r22
 9f6:	7c 01       	movw	r14, r24
 9f8:	b8 01       	movw	r22, r16
 9fa:	11 0f       	add	r17, r17
 9fc:	88 0b       	sbc	r24, r24
 9fe:	99 0b       	sbc	r25, r25
 a00:	0e 94 a2 06 	call	0xd44	; 0xd44 <__floatsisf>
 a04:	9b 01       	movw	r18, r22
 a06:	ac 01       	movw	r20, r24
 a08:	c7 01       	movw	r24, r14
 a0a:	b6 01       	movw	r22, r12
 a0c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3>
 a10:	0e 94 71 06 	call	0xce2	; 0xce2 <__fixunssfsi>
 a14:	7b bd       	out	0x2b, r23	; 43
 a16:	6a bd       	out	0x2a, r22	; 42
			OCR1B=(uint8_t)value*((float)Duty/100.0);
 a18:	79 bd       	out	0x29, r23	; 41
 a1a:	68 bd       	out	0x28, r22	; 40
			Er_Status = E_OK;
 a1c:	80 e0       	ldi	r24, 0x00	; 0
			break;
 a1e:	3d c0       	rjmp	.+122    	; 0xa9a <Pwm_Start+0x186>
		case PWM_CH2:
			//OC2 pin for PWm on timer2
			DIO_init(&DIO_Cfg_S_PWM2);
 a20:	89 e9       	ldi	r24, 0x99	; 153
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 4e 03 	call	0x69c	; 0x69c <DIO_init>
			Er_Status = E_OK;
 a28:	80 e0       	ldi	r24, 0x00	; 0
			break;
 a2a:	37 c0       	rjmp	.+110    	; 0xa9a <Pwm_Start+0x186>
			
		case PWM_CH1A_CH1B:
			value=(uint8_t)(F_CPU/((2*1024*Frequncy)))-1;
 a2c:	01 2e       	mov	r0, r17
 a2e:	1b e0       	ldi	r17, 0x0B	; 11
 a30:	22 0f       	add	r18, r18
 a32:	33 1f       	adc	r19, r19
 a34:	44 1f       	adc	r20, r20
 a36:	55 1f       	adc	r21, r21
 a38:	1a 95       	dec	r17
 a3a:	d1 f7       	brne	.-12     	; 0xa30 <Pwm_Start+0x11c>
 a3c:	10 2d       	mov	r17, r0
 a3e:	60 e0       	ldi	r22, 0x00	; 0
 a40:	74 e2       	ldi	r23, 0x24	; 36
 a42:	84 ef       	ldi	r24, 0xF4	; 244
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	0e 94 9b 07 	call	0xf36	; 0xf36 <__udivmodsi4>
 a4a:	21 50       	subi	r18, 0x01	; 1
			//OC2 pin for PWm on timer2
			ICR1 = value;
 a4c:	02 2f       	mov	r16, r18
 a4e:	10 e0       	ldi	r17, 0x00	; 0
 a50:	17 bd       	out	0x27, r17	; 39
 a52:	06 bd       	out	0x26, r16	; 38
			//set duty cycle of the first generated signal
			OCR1A=(uint8_t)value*((float)Duty/100.0);
 a54:	6c 2f       	mov	r22, r28
 a56:	70 e0       	ldi	r23, 0x00	; 0
 a58:	80 e0       	ldi	r24, 0x00	; 0
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
 a60:	20 e0       	ldi	r18, 0x00	; 0
 a62:	30 e0       	ldi	r19, 0x00	; 0
 a64:	48 ec       	ldi	r20, 0xC8	; 200
 a66:	52 e4       	ldi	r21, 0x42	; 66
 a68:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__divsf3>
 a6c:	6b 01       	movw	r12, r22
 a6e:	7c 01       	movw	r14, r24
 a70:	b8 01       	movw	r22, r16
 a72:	11 0f       	add	r17, r17
 a74:	88 0b       	sbc	r24, r24
 a76:	99 0b       	sbc	r25, r25
 a78:	0e 94 a2 06 	call	0xd44	; 0xd44 <__floatsisf>
 a7c:	9b 01       	movw	r18, r22
 a7e:	ac 01       	movw	r20, r24
 a80:	c7 01       	movw	r24, r14
 a82:	b6 01       	movw	r22, r12
 a84:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3>
 a88:	0e 94 71 06 	call	0xce2	; 0xce2 <__fixunssfsi>
 a8c:	7b bd       	out	0x2b, r23	; 43
 a8e:	6a bd       	out	0x2a, r22	; 42
			OCR1B=(uint8_t)value*((float)Duty/100.0);
 a90:	79 bd       	out	0x29, r23	; 41
 a92:	68 bd       	out	0x28, r22	; 40
			//DIO_init(&DIO_Cfg_S_PWM2);
			Er_Status = E_OK;
 a94:	80 e0       	ldi	r24, 0x00	; 0
			break;
 a96:	01 c0       	rjmp	.+2      	; 0xa9a <Pwm_Start+0x186>
	uint8_t value = 0;
	switch (Channel)
	{
		case PWM_CH0:

			Er_Status = E_OK;
 a98:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			Er_Status = E_NOK;
	}
	return Er_Status;
}
 a9a:	cf 91       	pop	r28
 a9c:	1f 91       	pop	r17
 a9e:	0f 91       	pop	r16
 aa0:	ff 90       	pop	r15
 aa2:	ef 90       	pop	r14
 aa4:	df 90       	pop	r13
 aa6:	cf 90       	pop	r12
 aa8:	08 95       	ret

00000aaa <Timer_Init>:
			Er_Status = E_NOK;
				
	}
	 
	return Er_Status; 
 }
 aaa:	fc 01       	movw	r30, r24
 aac:	89 2b       	or	r24, r25
 aae:	d9 f1       	breq	.+118    	; 0xb26 <Timer_Init+0x7c>
 ab0:	80 81       	ld	r24, Z
 ab2:	81 30       	cpi	r24, 0x01	; 1
 ab4:	a1 f0       	breq	.+40     	; 0xade <Timer_Init+0x34>
 ab6:	18 f0       	brcs	.+6      	; 0xabe <Timer_Init+0x14>
 ab8:	82 30       	cpi	r24, 0x02	; 2
 aba:	29 f1       	breq	.+74     	; 0xb06 <Timer_Init+0x5c>
 abc:	36 c0       	rjmp	.+108    	; 0xb2a <Timer_Init+0x80>
 abe:	93 b7       	in	r25, 0x33	; 51
 ac0:	81 81       	ldd	r24, Z+1	; 0x01
 ac2:	89 2b       	or	r24, r25
 ac4:	83 bf       	out	0x33, r24	; 51
 ac6:	93 b7       	in	r25, 0x33	; 51
 ac8:	82 81       	ldd	r24, Z+2	; 0x02
 aca:	89 2b       	or	r24, r25
 acc:	83 bf       	out	0x33, r24	; 51
 ace:	83 81       	ldd	r24, Z+3	; 0x03
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <prescaler_Timer0+0x1>
 ad6:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <prescaler_Timer0>
 ada:	80 e0       	ldi	r24, 0x00	; 0
 adc:	08 95       	ret
 ade:	8e b5       	in	r24, 0x2e	; 46
 ae0:	9f b5       	in	r25, 0x2f	; 47
 ae2:	21 81       	ldd	r18, Z+1	; 0x01
 ae4:	82 2b       	or	r24, r18
 ae6:	9f bd       	out	0x2f, r25	; 47
 ae8:	8e bd       	out	0x2e, r24	; 46
 aea:	8e b5       	in	r24, 0x2e	; 46
 aec:	9f b5       	in	r25, 0x2f	; 47
 aee:	22 81       	ldd	r18, Z+2	; 0x02
 af0:	82 2b       	or	r24, r18
 af2:	9f bd       	out	0x2f, r25	; 47
 af4:	8e bd       	out	0x2e, r24	; 46
 af6:	83 81       	ldd	r24, Z+3	; 0x03
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <prescaler_Timer1+0x1>
 afe:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <prescaler_Timer1>
 b02:	80 e0       	ldi	r24, 0x00	; 0
 b04:	08 95       	ret
 b06:	95 b5       	in	r25, 0x25	; 37
 b08:	81 81       	ldd	r24, Z+1	; 0x01
 b0a:	89 2b       	or	r24, r25
 b0c:	85 bd       	out	0x25, r24	; 37
 b0e:	95 b5       	in	r25, 0x25	; 37
 b10:	82 81       	ldd	r24, Z+2	; 0x02
 b12:	89 2b       	or	r24, r25
 b14:	85 bd       	out	0x25, r24	; 37
 b16:	83 81       	ldd	r24, Z+3	; 0x03
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <prescaler_Timer2+0x1>
 b1e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <prescaler_Timer2>
 b22:	80 e0       	ldi	r24, 0x00	; 0
 b24:	08 95       	ret
 b26:	81 e0       	ldi	r24, 0x01	; 1
 b28:	08 95       	ret
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	08 95       	ret

00000b2e <Timer_Start>:
 b2e:	81 30       	cpi	r24, 0x01	; 1
 b30:	71 f0       	breq	.+28     	; 0xb4e <Timer_Start+0x20>
 b32:	18 f0       	brcs	.+6      	; 0xb3a <Timer_Start+0xc>
 b34:	82 30       	cpi	r24, 0x02	; 2
 b36:	e9 f0       	breq	.+58     	; 0xb72 <Timer_Start+0x44>
 b38:	26 c0       	rjmp	.+76     	; 0xb86 <Timer_Start+0x58>
 b3a:	82 b7       	in	r24, 0x32	; 50
 b3c:	68 2b       	or	r22, r24
 b3e:	62 bf       	out	0x32, r22	; 50
 b40:	93 b7       	in	r25, 0x33	; 51
 b42:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <prescaler_Timer0>
 b46:	89 2b       	or	r24, r25
 b48:	83 bf       	out	0x33, r24	; 51
 b4a:	80 e0       	ldi	r24, 0x00	; 0
 b4c:	08 95       	ret
 b4e:	8c b5       	in	r24, 0x2c	; 44
 b50:	9d b5       	in	r25, 0x2d	; 45
 b52:	68 2b       	or	r22, r24
 b54:	79 2b       	or	r23, r25
 b56:	7d bd       	out	0x2d, r23	; 45
 b58:	6c bd       	out	0x2c, r22	; 44
 b5a:	2e b5       	in	r18, 0x2e	; 46
 b5c:	3f b5       	in	r19, 0x2f	; 47
 b5e:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <prescaler_Timer1>
 b62:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <prescaler_Timer1+0x1>
 b66:	82 2b       	or	r24, r18
 b68:	93 2b       	or	r25, r19
 b6a:	9f bd       	out	0x2f, r25	; 47
 b6c:	8e bd       	out	0x2e, r24	; 46
 b6e:	80 e0       	ldi	r24, 0x00	; 0
 b70:	08 95       	ret
 b72:	84 b5       	in	r24, 0x24	; 36
 b74:	68 2b       	or	r22, r24
 b76:	64 bd       	out	0x24, r22	; 36
 b78:	95 b5       	in	r25, 0x25	; 37
 b7a:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <prescaler_Timer2>
 b7e:	89 2b       	or	r24, r25
 b80:	85 bd       	out	0x25, r24	; 37
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	08 95       	ret
 b86:	81 e0       	ldi	r24, 0x01	; 1
 b88:	08 95       	ret

00000b8a <Timer_Stop>:
 b8a:	81 30       	cpi	r24, 0x01	; 1
 b8c:	79 f0       	breq	.+30     	; 0xbac <Timer_Stop+0x22>
 b8e:	18 f0       	brcs	.+6      	; 0xb96 <Timer_Stop+0xc>
 b90:	82 30       	cpi	r24, 0x02	; 2
 b92:	b9 f0       	breq	.+46     	; 0xbc2 <Timer_Stop+0x38>
 b94:	21 c0       	rjmp	.+66     	; 0xbd8 <Timer_Stop+0x4e>
 b96:	83 b7       	in	r24, 0x33	; 51
 b98:	8e 7f       	andi	r24, 0xFE	; 254
 b9a:	83 bf       	out	0x33, r24	; 51
 b9c:	83 b7       	in	r24, 0x33	; 51
 b9e:	8d 7f       	andi	r24, 0xFD	; 253
 ba0:	83 bf       	out	0x33, r24	; 51
 ba2:	83 b7       	in	r24, 0x33	; 51
 ba4:	8b 7f       	andi	r24, 0xFB	; 251
 ba6:	83 bf       	out	0x33, r24	; 51
 ba8:	80 e0       	ldi	r24, 0x00	; 0
 baa:	08 95       	ret
 bac:	8e b5       	in	r24, 0x2e	; 46
 bae:	8e 7f       	andi	r24, 0xFE	; 254
 bb0:	8e bd       	out	0x2e, r24	; 46
 bb2:	8e b5       	in	r24, 0x2e	; 46
 bb4:	8d 7f       	andi	r24, 0xFD	; 253
 bb6:	8e bd       	out	0x2e, r24	; 46
 bb8:	8e b5       	in	r24, 0x2e	; 46
 bba:	8b 7f       	andi	r24, 0xFB	; 251
 bbc:	8e bd       	out	0x2e, r24	; 46
 bbe:	80 e0       	ldi	r24, 0x00	; 0
 bc0:	08 95       	ret
 bc2:	85 b5       	in	r24, 0x25	; 37
 bc4:	8e 7f       	andi	r24, 0xFE	; 254
 bc6:	85 bd       	out	0x25, r24	; 37
 bc8:	85 b5       	in	r24, 0x25	; 37
 bca:	8d 7f       	andi	r24, 0xFD	; 253
 bcc:	85 bd       	out	0x25, r24	; 37
 bce:	85 b5       	in	r24, 0x25	; 37
 bd0:	8b 7f       	andi	r24, 0xFB	; 251
 bd2:	85 bd       	out	0x25, r24	; 37
 bd4:	80 e0       	ldi	r24, 0x00	; 0
 bd6:	08 95       	ret
 bd8:	81 e0       	ldi	r24, 0x01	; 1
 bda:	08 95       	ret

00000bdc <Timer_GetValue>:
 * 							
 */
uint8_t Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Timer_Value){
		
		uint8_t Er_Status =0;
		switch (Timer_CH_NO)
 bdc:	82 30       	cpi	r24, 0x02	; 2
 bde:	68 f0       	brcs	.+26     	; 0xbfa <Timer_GetValue+0x1e>
 be0:	82 30       	cpi	r24, 0x02	; 2
 be2:	11 f0       	breq	.+4      	; 0xbe8 <Timer_GetValue+0xc>
				*Timer_Value = TCNT2;
				OCR0= *Timer_Value; 
				Er_Status = E_OK;
				break;
			default:
				Er_Status = E_NOK;	
 be4:	81 e0       	ldi	r24, 0x01	; 1
 be6:	08 95       	ret
			case 1:
				//*Timer_Value = TCNT1;
				Er_Status = E_OK;
				break;
			case 2:
				*Timer_Value = TCNT2;
 be8:	84 b5       	in	r24, 0x24	; 36
 bea:	28 2f       	mov	r18, r24
 bec:	30 e0       	ldi	r19, 0x00	; 0
 bee:	fb 01       	movw	r30, r22
 bf0:	31 83       	std	Z+1, r19	; 0x01
 bf2:	20 83       	st	Z, r18
				OCR0= *Timer_Value; 
 bf4:	8c bf       	out	0x3c, r24	; 60
				Er_Status = E_OK;
 bf6:	80 e0       	ldi	r24, 0x00	; 0
				break;
 bf8:	08 95       	ret
		uint8_t Er_Status =0;
		switch (Timer_CH_NO)
		{
			case 0:
				//*Timer_Value = TCNT0;
				Er_Status = E_OK;
 bfa:	80 e0       	ldi	r24, 0x00	; 0
			default:
				Er_Status = E_NOK;	
		}	
	return	Er_Status;
	
}
 bfc:	08 95       	ret

00000bfe <__divsf3>:
 bfe:	0e 94 13 06 	call	0xc26	; 0xc26 <__divsf3x>
 c02:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_round>
 c06:	0e 94 ed 06 	call	0xdda	; 0xdda <__fp_pscB>
 c0a:	58 f0       	brcs	.+22     	; 0xc22 <__divsf3+0x24>
 c0c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fp_pscA>
 c10:	40 f0       	brcs	.+16     	; 0xc22 <__divsf3+0x24>
 c12:	29 f4       	brne	.+10     	; 0xc1e <__divsf3+0x20>
 c14:	5f 3f       	cpi	r21, 0xFF	; 255
 c16:	29 f0       	breq	.+10     	; 0xc22 <__divsf3+0x24>
 c18:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
 c1c:	51 11       	cpse	r21, r1
 c1e:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>
 c22:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_nan>

00000c26 <__divsf3x>:
 c26:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_split3>
 c2a:	68 f3       	brcs	.-38     	; 0xc06 <__divsf3+0x8>

00000c2c <__divsf3_pse>:
 c2c:	99 23       	and	r25, r25
 c2e:	b1 f3       	breq	.-20     	; 0xc1c <__divsf3+0x1e>
 c30:	55 23       	and	r21, r21
 c32:	91 f3       	breq	.-28     	; 0xc18 <__divsf3+0x1a>
 c34:	95 1b       	sub	r25, r21
 c36:	55 0b       	sbc	r21, r21
 c38:	bb 27       	eor	r27, r27
 c3a:	aa 27       	eor	r26, r26
 c3c:	62 17       	cp	r22, r18
 c3e:	73 07       	cpc	r23, r19
 c40:	84 07       	cpc	r24, r20
 c42:	38 f0       	brcs	.+14     	; 0xc52 <__divsf3_pse+0x26>
 c44:	9f 5f       	subi	r25, 0xFF	; 255
 c46:	5f 4f       	sbci	r21, 0xFF	; 255
 c48:	22 0f       	add	r18, r18
 c4a:	33 1f       	adc	r19, r19
 c4c:	44 1f       	adc	r20, r20
 c4e:	aa 1f       	adc	r26, r26
 c50:	a9 f3       	breq	.-22     	; 0xc3c <__divsf3_pse+0x10>
 c52:	35 d0       	rcall	.+106    	; 0xcbe <__divsf3_pse+0x92>
 c54:	0e 2e       	mov	r0, r30
 c56:	3a f0       	brmi	.+14     	; 0xc66 <__divsf3_pse+0x3a>
 c58:	e0 e8       	ldi	r30, 0x80	; 128
 c5a:	32 d0       	rcall	.+100    	; 0xcc0 <__divsf3_pse+0x94>
 c5c:	91 50       	subi	r25, 0x01	; 1
 c5e:	50 40       	sbci	r21, 0x00	; 0
 c60:	e6 95       	lsr	r30
 c62:	00 1c       	adc	r0, r0
 c64:	ca f7       	brpl	.-14     	; 0xc58 <__divsf3_pse+0x2c>
 c66:	2b d0       	rcall	.+86     	; 0xcbe <__divsf3_pse+0x92>
 c68:	fe 2f       	mov	r31, r30
 c6a:	29 d0       	rcall	.+82     	; 0xcbe <__divsf3_pse+0x92>
 c6c:	66 0f       	add	r22, r22
 c6e:	77 1f       	adc	r23, r23
 c70:	88 1f       	adc	r24, r24
 c72:	bb 1f       	adc	r27, r27
 c74:	26 17       	cp	r18, r22
 c76:	37 07       	cpc	r19, r23
 c78:	48 07       	cpc	r20, r24
 c7a:	ab 07       	cpc	r26, r27
 c7c:	b0 e8       	ldi	r27, 0x80	; 128
 c7e:	09 f0       	breq	.+2      	; 0xc82 <__divsf3_pse+0x56>
 c80:	bb 0b       	sbc	r27, r27
 c82:	80 2d       	mov	r24, r0
 c84:	bf 01       	movw	r22, r30
 c86:	ff 27       	eor	r31, r31
 c88:	93 58       	subi	r25, 0x83	; 131
 c8a:	5f 4f       	sbci	r21, 0xFF	; 255
 c8c:	3a f0       	brmi	.+14     	; 0xc9c <__divsf3_pse+0x70>
 c8e:	9e 3f       	cpi	r25, 0xFE	; 254
 c90:	51 05       	cpc	r21, r1
 c92:	78 f0       	brcs	.+30     	; 0xcb2 <__divsf3_pse+0x86>
 c94:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
 c98:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>
 c9c:	5f 3f       	cpi	r21, 0xFF	; 255
 c9e:	e4 f3       	brlt	.-8      	; 0xc98 <__divsf3_pse+0x6c>
 ca0:	98 3e       	cpi	r25, 0xE8	; 232
 ca2:	d4 f3       	brlt	.-12     	; 0xc98 <__divsf3_pse+0x6c>
 ca4:	86 95       	lsr	r24
 ca6:	77 95       	ror	r23
 ca8:	67 95       	ror	r22
 caa:	b7 95       	ror	r27
 cac:	f7 95       	ror	r31
 cae:	9f 5f       	subi	r25, 0xFF	; 255
 cb0:	c9 f7       	brne	.-14     	; 0xca4 <__divsf3_pse+0x78>
 cb2:	88 0f       	add	r24, r24
 cb4:	91 1d       	adc	r25, r1
 cb6:	96 95       	lsr	r25
 cb8:	87 95       	ror	r24
 cba:	97 f9       	bld	r25, 7
 cbc:	08 95       	ret
 cbe:	e1 e0       	ldi	r30, 0x01	; 1
 cc0:	66 0f       	add	r22, r22
 cc2:	77 1f       	adc	r23, r23
 cc4:	88 1f       	adc	r24, r24
 cc6:	bb 1f       	adc	r27, r27
 cc8:	62 17       	cp	r22, r18
 cca:	73 07       	cpc	r23, r19
 ccc:	84 07       	cpc	r24, r20
 cce:	ba 07       	cpc	r27, r26
 cd0:	20 f0       	brcs	.+8      	; 0xcda <__divsf3_pse+0xae>
 cd2:	62 1b       	sub	r22, r18
 cd4:	73 0b       	sbc	r23, r19
 cd6:	84 0b       	sbc	r24, r20
 cd8:	ba 0b       	sbc	r27, r26
 cda:	ee 1f       	adc	r30, r30
 cdc:	88 f7       	brcc	.-30     	; 0xcc0 <__divsf3_pse+0x94>
 cde:	e0 95       	com	r30
 ce0:	08 95       	ret

00000ce2 <__fixunssfsi>:
 ce2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_splitA>
 ce6:	88 f0       	brcs	.+34     	; 0xd0a <__fixunssfsi+0x28>
 ce8:	9f 57       	subi	r25, 0x7F	; 127
 cea:	98 f0       	brcs	.+38     	; 0xd12 <__fixunssfsi+0x30>
 cec:	b9 2f       	mov	r27, r25
 cee:	99 27       	eor	r25, r25
 cf0:	b7 51       	subi	r27, 0x17	; 23
 cf2:	b0 f0       	brcs	.+44     	; 0xd20 <__fixunssfsi+0x3e>
 cf4:	e1 f0       	breq	.+56     	; 0xd2e <__fixunssfsi+0x4c>
 cf6:	66 0f       	add	r22, r22
 cf8:	77 1f       	adc	r23, r23
 cfa:	88 1f       	adc	r24, r24
 cfc:	99 1f       	adc	r25, r25
 cfe:	1a f0       	brmi	.+6      	; 0xd06 <__fixunssfsi+0x24>
 d00:	ba 95       	dec	r27
 d02:	c9 f7       	brne	.-14     	; 0xcf6 <__fixunssfsi+0x14>
 d04:	14 c0       	rjmp	.+40     	; 0xd2e <__fixunssfsi+0x4c>
 d06:	b1 30       	cpi	r27, 0x01	; 1
 d08:	91 f0       	breq	.+36     	; 0xd2e <__fixunssfsi+0x4c>
 d0a:	0e 94 27 07 	call	0xe4e	; 0xe4e <__fp_zero>
 d0e:	b1 e0       	ldi	r27, 0x01	; 1
 d10:	08 95       	ret
 d12:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_zero>
 d16:	67 2f       	mov	r22, r23
 d18:	78 2f       	mov	r23, r24
 d1a:	88 27       	eor	r24, r24
 d1c:	b8 5f       	subi	r27, 0xF8	; 248
 d1e:	39 f0       	breq	.+14     	; 0xd2e <__fixunssfsi+0x4c>
 d20:	b9 3f       	cpi	r27, 0xF9	; 249
 d22:	cc f3       	brlt	.-14     	; 0xd16 <__fixunssfsi+0x34>
 d24:	86 95       	lsr	r24
 d26:	77 95       	ror	r23
 d28:	67 95       	ror	r22
 d2a:	b3 95       	inc	r27
 d2c:	d9 f7       	brne	.-10     	; 0xd24 <__fixunssfsi+0x42>
 d2e:	3e f4       	brtc	.+14     	; 0xd3e <__fixunssfsi+0x5c>
 d30:	90 95       	com	r25
 d32:	80 95       	com	r24
 d34:	70 95       	com	r23
 d36:	61 95       	neg	r22
 d38:	7f 4f       	sbci	r23, 0xFF	; 255
 d3a:	8f 4f       	sbci	r24, 0xFF	; 255
 d3c:	9f 4f       	sbci	r25, 0xFF	; 255
 d3e:	08 95       	ret

00000d40 <__floatunsisf>:
 d40:	e8 94       	clt
 d42:	09 c0       	rjmp	.+18     	; 0xd56 <__floatsisf+0x12>

00000d44 <__floatsisf>:
 d44:	97 fb       	bst	r25, 7
 d46:	3e f4       	brtc	.+14     	; 0xd56 <__floatsisf+0x12>
 d48:	90 95       	com	r25
 d4a:	80 95       	com	r24
 d4c:	70 95       	com	r23
 d4e:	61 95       	neg	r22
 d50:	7f 4f       	sbci	r23, 0xFF	; 255
 d52:	8f 4f       	sbci	r24, 0xFF	; 255
 d54:	9f 4f       	sbci	r25, 0xFF	; 255
 d56:	99 23       	and	r25, r25
 d58:	a9 f0       	breq	.+42     	; 0xd84 <__floatsisf+0x40>
 d5a:	f9 2f       	mov	r31, r25
 d5c:	96 e9       	ldi	r25, 0x96	; 150
 d5e:	bb 27       	eor	r27, r27
 d60:	93 95       	inc	r25
 d62:	f6 95       	lsr	r31
 d64:	87 95       	ror	r24
 d66:	77 95       	ror	r23
 d68:	67 95       	ror	r22
 d6a:	b7 95       	ror	r27
 d6c:	f1 11       	cpse	r31, r1
 d6e:	f8 cf       	rjmp	.-16     	; 0xd60 <__floatsisf+0x1c>
 d70:	fa f4       	brpl	.+62     	; 0xdb0 <__floatsisf+0x6c>
 d72:	bb 0f       	add	r27, r27
 d74:	11 f4       	brne	.+4      	; 0xd7a <__floatsisf+0x36>
 d76:	60 ff       	sbrs	r22, 0
 d78:	1b c0       	rjmp	.+54     	; 0xdb0 <__floatsisf+0x6c>
 d7a:	6f 5f       	subi	r22, 0xFF	; 255
 d7c:	7f 4f       	sbci	r23, 0xFF	; 255
 d7e:	8f 4f       	sbci	r24, 0xFF	; 255
 d80:	9f 4f       	sbci	r25, 0xFF	; 255
 d82:	16 c0       	rjmp	.+44     	; 0xdb0 <__floatsisf+0x6c>
 d84:	88 23       	and	r24, r24
 d86:	11 f0       	breq	.+4      	; 0xd8c <__floatsisf+0x48>
 d88:	96 e9       	ldi	r25, 0x96	; 150
 d8a:	11 c0       	rjmp	.+34     	; 0xdae <__floatsisf+0x6a>
 d8c:	77 23       	and	r23, r23
 d8e:	21 f0       	breq	.+8      	; 0xd98 <__floatsisf+0x54>
 d90:	9e e8       	ldi	r25, 0x8E	; 142
 d92:	87 2f       	mov	r24, r23
 d94:	76 2f       	mov	r23, r22
 d96:	05 c0       	rjmp	.+10     	; 0xda2 <__floatsisf+0x5e>
 d98:	66 23       	and	r22, r22
 d9a:	71 f0       	breq	.+28     	; 0xdb8 <__floatsisf+0x74>
 d9c:	96 e8       	ldi	r25, 0x86	; 134
 d9e:	86 2f       	mov	r24, r22
 da0:	70 e0       	ldi	r23, 0x00	; 0
 da2:	60 e0       	ldi	r22, 0x00	; 0
 da4:	2a f0       	brmi	.+10     	; 0xdb0 <__floatsisf+0x6c>
 da6:	9a 95       	dec	r25
 da8:	66 0f       	add	r22, r22
 daa:	77 1f       	adc	r23, r23
 dac:	88 1f       	adc	r24, r24
 dae:	da f7       	brpl	.-10     	; 0xda6 <__floatsisf+0x62>
 db0:	88 0f       	add	r24, r24
 db2:	96 95       	lsr	r25
 db4:	87 95       	ror	r24
 db6:	97 f9       	bld	r25, 7
 db8:	08 95       	ret

00000dba <__fp_inf>:
 dba:	97 f9       	bld	r25, 7
 dbc:	9f 67       	ori	r25, 0x7F	; 127
 dbe:	80 e8       	ldi	r24, 0x80	; 128
 dc0:	70 e0       	ldi	r23, 0x00	; 0
 dc2:	60 e0       	ldi	r22, 0x00	; 0
 dc4:	08 95       	ret

00000dc6 <__fp_nan>:
 dc6:	9f ef       	ldi	r25, 0xFF	; 255
 dc8:	80 ec       	ldi	r24, 0xC0	; 192
 dca:	08 95       	ret

00000dcc <__fp_pscA>:
 dcc:	00 24       	eor	r0, r0
 dce:	0a 94       	dec	r0
 dd0:	16 16       	cp	r1, r22
 dd2:	17 06       	cpc	r1, r23
 dd4:	18 06       	cpc	r1, r24
 dd6:	09 06       	cpc	r0, r25
 dd8:	08 95       	ret

00000dda <__fp_pscB>:
 dda:	00 24       	eor	r0, r0
 ddc:	0a 94       	dec	r0
 dde:	12 16       	cp	r1, r18
 de0:	13 06       	cpc	r1, r19
 de2:	14 06       	cpc	r1, r20
 de4:	05 06       	cpc	r0, r21
 de6:	08 95       	ret

00000de8 <__fp_round>:
 de8:	09 2e       	mov	r0, r25
 dea:	03 94       	inc	r0
 dec:	00 0c       	add	r0, r0
 dee:	11 f4       	brne	.+4      	; 0xdf4 <__fp_round+0xc>
 df0:	88 23       	and	r24, r24
 df2:	52 f0       	brmi	.+20     	; 0xe08 <__fp_round+0x20>
 df4:	bb 0f       	add	r27, r27
 df6:	40 f4       	brcc	.+16     	; 0xe08 <__fp_round+0x20>
 df8:	bf 2b       	or	r27, r31
 dfa:	11 f4       	brne	.+4      	; 0xe00 <__fp_round+0x18>
 dfc:	60 ff       	sbrs	r22, 0
 dfe:	04 c0       	rjmp	.+8      	; 0xe08 <__fp_round+0x20>
 e00:	6f 5f       	subi	r22, 0xFF	; 255
 e02:	7f 4f       	sbci	r23, 0xFF	; 255
 e04:	8f 4f       	sbci	r24, 0xFF	; 255
 e06:	9f 4f       	sbci	r25, 0xFF	; 255
 e08:	08 95       	ret

00000e0a <__fp_split3>:
 e0a:	57 fd       	sbrc	r21, 7
 e0c:	90 58       	subi	r25, 0x80	; 128
 e0e:	44 0f       	add	r20, r20
 e10:	55 1f       	adc	r21, r21
 e12:	59 f0       	breq	.+22     	; 0xe2a <__fp_splitA+0x10>
 e14:	5f 3f       	cpi	r21, 0xFF	; 255
 e16:	71 f0       	breq	.+28     	; 0xe34 <__fp_splitA+0x1a>
 e18:	47 95       	ror	r20

00000e1a <__fp_splitA>:
 e1a:	88 0f       	add	r24, r24
 e1c:	97 fb       	bst	r25, 7
 e1e:	99 1f       	adc	r25, r25
 e20:	61 f0       	breq	.+24     	; 0xe3a <__fp_splitA+0x20>
 e22:	9f 3f       	cpi	r25, 0xFF	; 255
 e24:	79 f0       	breq	.+30     	; 0xe44 <__fp_splitA+0x2a>
 e26:	87 95       	ror	r24
 e28:	08 95       	ret
 e2a:	12 16       	cp	r1, r18
 e2c:	13 06       	cpc	r1, r19
 e2e:	14 06       	cpc	r1, r20
 e30:	55 1f       	adc	r21, r21
 e32:	f2 cf       	rjmp	.-28     	; 0xe18 <__fp_split3+0xe>
 e34:	46 95       	lsr	r20
 e36:	f1 df       	rcall	.-30     	; 0xe1a <__fp_splitA>
 e38:	08 c0       	rjmp	.+16     	; 0xe4a <__fp_splitA+0x30>
 e3a:	16 16       	cp	r1, r22
 e3c:	17 06       	cpc	r1, r23
 e3e:	18 06       	cpc	r1, r24
 e40:	99 1f       	adc	r25, r25
 e42:	f1 cf       	rjmp	.-30     	; 0xe26 <__fp_splitA+0xc>
 e44:	86 95       	lsr	r24
 e46:	71 05       	cpc	r23, r1
 e48:	61 05       	cpc	r22, r1
 e4a:	08 94       	sec
 e4c:	08 95       	ret

00000e4e <__fp_zero>:
 e4e:	e8 94       	clt

00000e50 <__fp_szero>:
 e50:	bb 27       	eor	r27, r27
 e52:	66 27       	eor	r22, r22
 e54:	77 27       	eor	r23, r23
 e56:	cb 01       	movw	r24, r22
 e58:	97 f9       	bld	r25, 7
 e5a:	08 95       	ret

00000e5c <__mulsf3>:
 e5c:	0e 94 41 07 	call	0xe82	; 0xe82 <__mulsf3x>
 e60:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_round>
 e64:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fp_pscA>
 e68:	38 f0       	brcs	.+14     	; 0xe78 <__mulsf3+0x1c>
 e6a:	0e 94 ed 06 	call	0xdda	; 0xdda <__fp_pscB>
 e6e:	20 f0       	brcs	.+8      	; 0xe78 <__mulsf3+0x1c>
 e70:	95 23       	and	r25, r21
 e72:	11 f0       	breq	.+4      	; 0xe78 <__mulsf3+0x1c>
 e74:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
 e78:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_nan>
 e7c:	11 24       	eor	r1, r1
 e7e:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>

00000e82 <__mulsf3x>:
 e82:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_split3>
 e86:	70 f3       	brcs	.-36     	; 0xe64 <__mulsf3+0x8>

00000e88 <__mulsf3_pse>:
 e88:	95 9f       	mul	r25, r21
 e8a:	c1 f3       	breq	.-16     	; 0xe7c <__mulsf3+0x20>
 e8c:	95 0f       	add	r25, r21
 e8e:	50 e0       	ldi	r21, 0x00	; 0
 e90:	55 1f       	adc	r21, r21
 e92:	62 9f       	mul	r22, r18
 e94:	f0 01       	movw	r30, r0
 e96:	72 9f       	mul	r23, r18
 e98:	bb 27       	eor	r27, r27
 e9a:	f0 0d       	add	r31, r0
 e9c:	b1 1d       	adc	r27, r1
 e9e:	63 9f       	mul	r22, r19
 ea0:	aa 27       	eor	r26, r26
 ea2:	f0 0d       	add	r31, r0
 ea4:	b1 1d       	adc	r27, r1
 ea6:	aa 1f       	adc	r26, r26
 ea8:	64 9f       	mul	r22, r20
 eaa:	66 27       	eor	r22, r22
 eac:	b0 0d       	add	r27, r0
 eae:	a1 1d       	adc	r26, r1
 eb0:	66 1f       	adc	r22, r22
 eb2:	82 9f       	mul	r24, r18
 eb4:	22 27       	eor	r18, r18
 eb6:	b0 0d       	add	r27, r0
 eb8:	a1 1d       	adc	r26, r1
 eba:	62 1f       	adc	r22, r18
 ebc:	73 9f       	mul	r23, r19
 ebe:	b0 0d       	add	r27, r0
 ec0:	a1 1d       	adc	r26, r1
 ec2:	62 1f       	adc	r22, r18
 ec4:	83 9f       	mul	r24, r19
 ec6:	a0 0d       	add	r26, r0
 ec8:	61 1d       	adc	r22, r1
 eca:	22 1f       	adc	r18, r18
 ecc:	74 9f       	mul	r23, r20
 ece:	33 27       	eor	r19, r19
 ed0:	a0 0d       	add	r26, r0
 ed2:	61 1d       	adc	r22, r1
 ed4:	23 1f       	adc	r18, r19
 ed6:	84 9f       	mul	r24, r20
 ed8:	60 0d       	add	r22, r0
 eda:	21 1d       	adc	r18, r1
 edc:	82 2f       	mov	r24, r18
 ede:	76 2f       	mov	r23, r22
 ee0:	6a 2f       	mov	r22, r26
 ee2:	11 24       	eor	r1, r1
 ee4:	9f 57       	subi	r25, 0x7F	; 127
 ee6:	50 40       	sbci	r21, 0x00	; 0
 ee8:	9a f0       	brmi	.+38     	; 0xf10 <__mulsf3_pse+0x88>
 eea:	f1 f0       	breq	.+60     	; 0xf28 <__mulsf3_pse+0xa0>
 eec:	88 23       	and	r24, r24
 eee:	4a f0       	brmi	.+18     	; 0xf02 <__mulsf3_pse+0x7a>
 ef0:	ee 0f       	add	r30, r30
 ef2:	ff 1f       	adc	r31, r31
 ef4:	bb 1f       	adc	r27, r27
 ef6:	66 1f       	adc	r22, r22
 ef8:	77 1f       	adc	r23, r23
 efa:	88 1f       	adc	r24, r24
 efc:	91 50       	subi	r25, 0x01	; 1
 efe:	50 40       	sbci	r21, 0x00	; 0
 f00:	a9 f7       	brne	.-22     	; 0xeec <__mulsf3_pse+0x64>
 f02:	9e 3f       	cpi	r25, 0xFE	; 254
 f04:	51 05       	cpc	r21, r1
 f06:	80 f0       	brcs	.+32     	; 0xf28 <__mulsf3_pse+0xa0>
 f08:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
 f0c:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>
 f10:	5f 3f       	cpi	r21, 0xFF	; 255
 f12:	e4 f3       	brlt	.-8      	; 0xf0c <__mulsf3_pse+0x84>
 f14:	98 3e       	cpi	r25, 0xE8	; 232
 f16:	d4 f3       	brlt	.-12     	; 0xf0c <__mulsf3_pse+0x84>
 f18:	86 95       	lsr	r24
 f1a:	77 95       	ror	r23
 f1c:	67 95       	ror	r22
 f1e:	b7 95       	ror	r27
 f20:	f7 95       	ror	r31
 f22:	e7 95       	ror	r30
 f24:	9f 5f       	subi	r25, 0xFF	; 255
 f26:	c1 f7       	brne	.-16     	; 0xf18 <__mulsf3_pse+0x90>
 f28:	fe 2b       	or	r31, r30
 f2a:	88 0f       	add	r24, r24
 f2c:	91 1d       	adc	r25, r1
 f2e:	96 95       	lsr	r25
 f30:	87 95       	ror	r24
 f32:	97 f9       	bld	r25, 7
 f34:	08 95       	ret

00000f36 <__udivmodsi4>:
 f36:	a1 e2       	ldi	r26, 0x21	; 33
 f38:	1a 2e       	mov	r1, r26
 f3a:	aa 1b       	sub	r26, r26
 f3c:	bb 1b       	sub	r27, r27
 f3e:	fd 01       	movw	r30, r26
 f40:	0d c0       	rjmp	.+26     	; 0xf5c <__udivmodsi4_ep>

00000f42 <__udivmodsi4_loop>:
 f42:	aa 1f       	adc	r26, r26
 f44:	bb 1f       	adc	r27, r27
 f46:	ee 1f       	adc	r30, r30
 f48:	ff 1f       	adc	r31, r31
 f4a:	a2 17       	cp	r26, r18
 f4c:	b3 07       	cpc	r27, r19
 f4e:	e4 07       	cpc	r30, r20
 f50:	f5 07       	cpc	r31, r21
 f52:	20 f0       	brcs	.+8      	; 0xf5c <__udivmodsi4_ep>
 f54:	a2 1b       	sub	r26, r18
 f56:	b3 0b       	sbc	r27, r19
 f58:	e4 0b       	sbc	r30, r20
 f5a:	f5 0b       	sbc	r31, r21

00000f5c <__udivmodsi4_ep>:
 f5c:	66 1f       	adc	r22, r22
 f5e:	77 1f       	adc	r23, r23
 f60:	88 1f       	adc	r24, r24
 f62:	99 1f       	adc	r25, r25
 f64:	1a 94       	dec	r1
 f66:	69 f7       	brne	.-38     	; 0xf42 <__udivmodsi4_loop>
 f68:	60 95       	com	r22
 f6a:	70 95       	com	r23
 f6c:	80 95       	com	r24
 f6e:	90 95       	com	r25
 f70:	9b 01       	movw	r18, r22
 f72:	ac 01       	movw	r20, r24
 f74:	bd 01       	movw	r22, r26
 f76:	cf 01       	movw	r24, r30
 f78:	08 95       	ret

00000f7a <_exit>:
 f7a:	f8 94       	cli

00000f7c <__stop_program>:
 f7c:	ff cf       	rjmp	.-2      	; 0xf7c <__stop_program>
